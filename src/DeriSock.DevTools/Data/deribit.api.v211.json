{
  "version": "2.1.1",
  "endpoints": {
    "production": "wss://www.deribit.com/ws/api/v2",
    "testnet": "wss://test.deribit.com/ws/api/v2"
  },
  "methods": {
    "public/auth": {
      "category": "Authentication",
      "description": "Retrieve an Oauth access token, to be used for authentication of 'private' requests.\nThree methods of authentication are supported:\n- `client_credentials` - using the access key and access secret that can be found on the API page on the website\n- `client_signature` - using the access key that can be found on the API page on the website and user generated signature. The signature is calculated using some fields provided in the request, using formula described here [Deribit signature credentials](https://docs.deribit.com/#additional-authorization-method-signature-credentials-websocket-api)\n- `refresh_token` - using a refresh token that was received from an earlier invocation\nThe response will contain an access token, expiration period (number of seconds that the token is valid) and a refresh token that can be used to get a new set of tokens.",
      "excludeInInterface": true,
      "request": {
        "properties": {
          "grant_type": {
            "description": "Method of authentication",
            "apiDataType": "string",
            "dataType": "GrantType",
            "enumValues": [
              "client_credentials",
              "client_signature",
              "refresh_token"
            ]
          },
          "client_id": {
            "description": "Required for grant type `client_credentials` and `client_signature`",
            "apiDataType": "string",
            "dataType": "string"
          },
          "client_secret": {
            "description": "Required for grant type `client_credentials`",
            "apiDataType": "string",
            "dataType": "string"
          },
          "refresh_token": {
            "description": "Required for grant type `refresh_token`",
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "Required for grant type `client_signature`, provides time when request has been generated (milliseconds since the UNIX epoch)",
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "signature": {
            "description": "Required for grant type `client_signature`; it's a cryptographic signature calculated over provided fields using user __secret key__. The signature should be calculated as an HMAC (Hash-based Message Authentication Code) with `SHA256` hash algorithm",
            "apiDataType": "string",
            "dataType": "string"
          },
          "nonce": {
            "description": "Optional for grant type `client_signature`; delivers user generated initialization vector for the server token",
            "apiDataType": "string",
            "dataType": "string"
          },
          "data": {
            "description": "Optional for grant type `client_signature`; contains any user specific value",
            "apiDataType": "string",
            "dataType": "string"
          },
          "state": {
            "description": "Will be passed back in the response",
            "apiDataType": "string",
            "dataType": "string"
          },
          "scope": {
            "description": "Describes type of the access for assigned token, possible values: `connection`, `session:name`, `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `expires:NUMBER`, `ip:ADDR`.\n\n Details are elucidated in [Access scope](https://docs.deribit.com/#access-scope)",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "AuthTokenData",
        "properties": {
          "access_token": {
            "description": "",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "expires_in": {
            "description": "Token lifetime in seconds",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "refresh_token": {
            "description": "Can be used to request a new token (with a new lifetime)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "scope": {
            "description": "Type of the access for assigned token",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "sid": {
            "description": "Optional Session id",
            "apiDataType": "string",
            "dataType": "string"
          },
          "state": {
            "description": "Copied from the input (if applicable)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "token_type": {
            "description": "Authorization type, allowed value - `bearer`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "public/exchange_token": {
      "category": "Authentication",
      "description": "Generates token for new subject id. This method can be used to switch between subaccounts.",
      "request": {
        "properties": {
          "refresh_token": {
            "description": "Refresh token",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "subject_id": {
            "description": "New subject id",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "AuthTokenData",
        "properties": {
          "access_token": {
            "description": "",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "expires_in": {
            "description": "Token lifetime in seconds",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "refresh_token": {
            "description": "Can be used to request a new token (with a new lifetime)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "scope": {
            "description": "Type of the access for assigned token",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "sid": {
            "description": "Optional Session id",
            "apiDataType": "string",
            "dataType": "string"
          },
          "state": {
            "description": "Copied from the input (only for /public/auth and only if applicable)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "token_type": {
            "description": "Authorization type, allowed value - `bearer`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "public/fork_token": {
      "category": "Authentication",
      "description": "Generates token for new named session. This method can be used only with session scoped tokens.",
      "request": {
        "properties": {
          "refresh_token": {
            "description": "Refresh token",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "session_name": {
            "description": "New session name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "AuthTokenData",
        "properties": {
          "access_token": {
            "description": "",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "expires_in": {
            "description": "Token lifetime in seconds",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "refresh_token": {
            "description": "Can be used to request a new token (with a new lifetime)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "scope": {
            "description": "Type of the access for assigned token",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "sid": {
            "description": "Optional Session id",
            "apiDataType": "string",
            "dataType": "string"
          },
          "state": {
            "description": "Copied from the input (only for /public/auth and only if applicable)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "token_type": {
            "description": "Authorization type, allowed value - `bearer`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/logout": {
      "category": "Authentication",
      "description": "Gracefully close websocket connection, when COD (Cancel On Disconnect) is enabled orders are not cancelled",
      "isSynchronous": true,
      "request": {
        "properties": {
          "invalidate_token": {
            "description": "If value is `true` all tokens created in current session are invalidated, default: `true`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": true
          }
        }
      }
    },
    "public/set_heartbeat": {
      "category": "Session management",
      "description": "Signals the Websocket connection to send and request heartbeats. Heartbeats can be used to detect stale connections. When heartbeats have been set up, the API server will send `heartbeat` messages and `test_request` messages. Your software should respond to `test_request` messages by sending a `/api/v2/public/test` request. If your software fails to do so, the API server will immediately close the connection. If your account is configured to cancel on disconnect, any orders opened over the connection will be cancelled.",
      "request": {
        "properties": {
          "interval": {
            "description": "The heartbeat interval in seconds, but not less than 10",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "public/disable_heartbeat": {
      "category": "Session management",
      "description": "Stop sending heartbeat messages.",
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/enable_cancel_on_disconnect": {
      "category": "Session management",
      "description": "Enable Cancel On Disconnect for the connection. After enabling Cancel On Disconnect all orders created by the connection will be removed when connection is closed. \n\n __NOTICE__ It does not affect orders created by other connections - they will remain active !\n\n When change is applied for the account, then every newly opened connection will start with __active__ Cancel on Disconnect.",
      "request": {
        "dataType": "CancelOnDisconnectRequest",
        "properties": {
          "scope": {
            "description": "Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - `connection`)\n\n __NOTICE:__ Scope `connection` can be used only when working via Websocket.",
            "apiDataType": "string",
            "dataType": "ConnectionScope",
            "enumValues": [
              "connection",
              "account"
            ],
            "defaultValue": "connection"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/disable_cancel_on_disconnect": {
      "category": "Session management",
      "description": "Disable Cancel On Disconnect for the connection.\n\n When change is applied for the account, then every newly opened connection will start with __inactive__ Cancel on Disconnect.",
      "request": {
        "dataType": "CancelOnDisconnectRequest",
        "properties": {
          "scope": {
            "description": "Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - `connection`)\n\n __NOTICE:__ Scope `connection` can be used only when working via Websocket.",
            "apiDataType": "string",
            "dataType": "ConnectionScope",
            "enumValues": [
              "connection",
              "account"
            ],
            "defaultValue": "connection"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/get_cancel_on_disconnect": {
      "category": "Session management",
      "description": "Read current Cancel On Disconnect configuration for the account.",
      "request": {
        "dataType": "CancelOnDisconnectRequest",
        "properties": {
          "scope": {
            "description": "Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - `connection`)\n\n __NOTICE:__ Scope `connection` can be used only when working via Websocket.",
            "apiDataType": "string",
            "dataType": "ConnectionScope",
            "enumValues": [
              "connection",
              "account"
            ],
            "defaultValue": "connection"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "CancelOnDisconnectData",
        "properties": {
          "enabled": {
            "description": "Current configuration status",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "scope": {
            "description": "Informs if Cancel on Disconnect was checked for the current connection or the account",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "public/get_time": {
      "category": "Supporting",
      "description": "Retrieves the current time (in milliseconds). This API endpoint can be used to check the clock skew between your software and Deribit's systems.",
      "response": {
        "description": "Current timestamp (milliseconds since the UNIX epoch)",
        "required": true,
        "apiDataType": "integer",
        "dataType": "DateTime",
        "converters": [
          "MillisecondsTimestampConverter"
        ]
      }
    },
    "public/hello": {
      "category": "Supporting",
      "description": "Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.",
      "request": {
        "properties": {
          "client_name": {
            "description": "Client software name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "client_version": {
            "description": "Client software version",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ServerVersionData",
        "properties": {
          "version": {
            "description": "The API version",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "public/status": {
      "category": "Supporting",
      "description": "Method used to get information about locked currencies",
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "PlatformLockStatus",
        "properties": {
          "locked": {
            "description": "`true` when platform is locked in all currencies, `partial` when some currencies are locked, `false` - when there are not currencies locked",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "locked_currencies": {
            "description": "List of currencies in which platform is locked",
            "required": true,
            "apiDataType": "array",
            "dataType": "array",
            "arrayDataType": "string"
          }
        }
      }
    },
    "public/test": {
      "category": "Supporting",
      "description": "Tests the connection to the API server, and returns its version. You can use this to make sure the API is reachable, and matches the expected version.",
      "request": {
        "properties": {
          "expected_result": {
            "description": "The value \"exception\" will trigger an error response. This may be useful for testing wrapper libraries.",
            "apiDataType": "string",
            "dataType": "TestExpectedResult",
            "enumValues": [
              "",
              "exception"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ServerVersionData",
        "properties": {
          "version": {
            "description": "The API version",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "public/subscribe": {
      "category": "Subscription management",
      "description": "Subscribe to one or more channels.\nThis is the same method as [/private/subscribe](https://docs.deribit.com/#private_subscribe), but it can only be used for 'public' channels.",
      "excludeInInterface": true,
      "request": {
        "properties": {
          "channels": {
            "description": "A list of channels to subscribe to.",
            "required": true,
            "apiDataType": "array",
            "dataType": "array",
            "arrayDataType": "string"
          }
        }
      },
      "response": {
        "description": "A list of subscribed channels.",
        "required": true,
        "apiDataType": "array of string",
        "dataType": "array",
        "arrayDataType": "string"
      }
    },
    "public/unsubscribe": {
      "category": "Subscription management",
      "description": "Unsubscribe from one or more channels.",
      "excludeInInterface": true,
      "request": {
        "properties": {
          "channels": {
            "description": "A list of channels to unsubscribe from.",
            "required": true,
            "apiDataType": "array",
            "dataType": "array",
            "arrayDataType": "string"
          }
        }
      },
      "response": {
        "description": "A list of subscribed channels.",
        "required": true,
        "apiDataType": "array of string",
        "dataType": "array",
        "arrayDataType": "string"
      }
    },
    "public/unsubscribe_all": {
      "category": "Subscription management",
      "description": "Unsubscribe from all the channels subscribed so far.",
      "excludeInInterface": true,
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/subscribe": {
      "category": "Subscription management",
      "description": "Subscribe to one or more channels.\nThe name of the channel determines what information will be provided, and in what form.",
      "excludeInInterface": true,
      "request": {
        "properties": {
          "channels": {
            "description": "A list of channels to subscribe to.",
            "required": true,
            "apiDataType": "array",
            "dataType": "array",
            "arrayDataType": "string"
          },
          "label": {
            "description": "Optional label which will be added to notifications of private channels (max 16 characters).",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "description": "A list of subscribed channels.",
        "required": true,
        "apiDataType": "array of string",
        "dataType": "array",
        "arrayDataType": "string"
      }
    },
    "private/unsubscribe": {
      "category": "Subscription management",
      "description": "Unsubscribe from one or more channels.",
      "excludeInInterface": true,
      "request": {
        "properties": {
          "channels": {
            "description": "A list of channels to unsubscribe from.",
            "required": true,
            "apiDataType": "array",
            "dataType": "array",
            "arrayDataType": "string"
          }
        }
      },
      "response": {
        "description": "A list of subscribed channels.",
        "required": true,
        "apiDataType": "array of string",
        "dataType": "array",
        "arrayDataType": "string"
      }
    },
    "private/unsubscribe_all": {
      "category": "Subscription management",
      "description": "Unsubscribe from all the channels subscribed so far.",
      "excludeInInterface": true,
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "public/get_book_summary_by_currency": {
      "category": "Market data",
      "description": "Retrieves the summary information such as open interest, 24h volume, etc. for all instruments for the currency (optionally filtered by kind).",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Instrument kind, if not provided instruments of all kinds are considered",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "BookSummaryEntry",
        "properties": {
          "ask_price": {
            "description": "The current best ask price, `null` if there aren't any asks",
            "apiDataType": "number",
            "dataType": "number"
          },
          "base_currency": {
            "description": "Base currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "bid_price": {
            "description": "The current best bid price, `null` if there aren't any bids",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "current_funding": {
            "description": "Current funding (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "estimated_delivery_price": {
            "description": "Estimated delivery price for the market. For more details, see Contract Specification > General Documentation > Expiration Price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "funding_8h": {
            "description": "Funding 8h (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "high": {
            "description": "Price of the 24h highest trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interest_rate": {
            "description": "Interest rate used in implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "last": {
            "description": "The price of the latest trade, `null` if there weren't any trades",
            "apiDataType": "number",
            "dataType": "number"
          },
          "low": {
            "description": "Price of the 24h lowest trade, `null` if there weren't any trades",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_price": {
            "description": "The current instrument market price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mid_price": {
            "description": "The average of the best bid and ask, `null` if there aren't any asks or bids",
            "apiDataType": "number",
            "dataType": "number"
          },
          "notional_volume": {
            "description": "Volume in quote currency (futures only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "open_interest": {
            "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "price_change": {
            "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
            "apiDataType": "number",
            "dataType": "number"
          },
          "quote_currency": {
            "description": "Quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "underlying_index": {
            "description": "Name of the underlying future, or `'index_price'` (options only)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "underlying_price": {
            "description": "underlying price for implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "volume": {
            "description": "The total 24h traded volume (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "volume_usd": {
            "description": "[DEPRECATED] Volume in usd, use 'notional_volume' instead, available only for instruments with USD as quote currency",
            "deprecated": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_book_summary_by_instrument": {
      "category": "Market data",
      "description": "Retrieves the summary information such as open interest, 24h volume, etc. for a specific instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "BookSummaryEntry",
        "properties": {
          "ask_price": {
            "description": "The current best ask price, `null` if there aren't any asks",
            "apiDataType": "number",
            "dataType": "number"
          },
          "base_currency": {
            "description": "Base currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "bid_price": {
            "description": "The current best bid price, `null` if there aren't any bids",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "current_funding": {
            "description": "Current funding (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "estimated_delivery_price": {
            "description": "Estimated delivery price for the market. For more details, see Contract Specification > General Documentation > Expiration Price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "funding_8h": {
            "description": "Funding 8h (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "high": {
            "description": "Price of the 24h highest trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interest_rate": {
            "description": "Interest rate used in implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "last": {
            "description": "The price of the latest trade, `null` if there weren't any trades",
            "apiDataType": "number",
            "dataType": "number"
          },
          "low": {
            "description": "Price of the 24h lowest trade, `null` if there weren't any trades",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_price": {
            "description": "The current instrument market price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mid_price": {
            "description": "The average of the best bid and ask, `null` if there aren't any asks or bids",
            "apiDataType": "number",
            "dataType": "number"
          },
          "notional_volume": {
            "description": "Volume in quote currency (futures only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "open_interest": {
            "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "price_change": {
            "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
            "apiDataType": "number",
            "dataType": "number"
          },
          "quote_currency": {
            "description": "Quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "underlying_index": {
            "description": "Name of the underlying future, or `'index_price'` (options only)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "underlying_price": {
            "description": "underlying price for implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "volume": {
            "description": "The total 24h traded volume (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "volume_usd": {
            "description": "[DEPRECATED] Volume in usd, use 'notional_volume' instead, available only for instruments with USD as quote currency",
            "deprecated": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_contract_size": {
      "category": "Market data",
      "description": "Retrieves contract size of provided instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ContractSizeData",
        "properties": {
          "contract_size": {
            "description": "Contract size, for futures in USD, for options in base currency of the instrument (BTC, ETH, ...)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      }
    },
    "public/get_currencies": {
      "category": "Market data",
      "description": "Retrieves all cryptocurrencies supported by the API.",
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "CurrencyData",
        "properties": {
          "coin_type": {
            "description": "The type of the currency.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "currency": {
            "description": "The abbreviation of the currency. This abbreviation is used elsewhere in the API to identify the currency.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "currency_long": {
            "description": "The full name for the currency.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "fee_precision": {
            "description": "fee precision",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "min_confirmations": {
            "description": "Minimum number of block chain confirmations before deposit is accepted.",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "min_withdrawal_fee": {
            "description": "The minimum transaction fee paid for withdrawals",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "withdrawal_fee": {
            "description": "The total transaction fee paid for withdrawals",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "withdrawal_priorities": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "WithdrawalPriority",
            "properties": {
              "name": {
                "description": "",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "value": {
                "description": "",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "public/get_delivery_prices": {
      "category": "Market data",
      "description": "Retrieves delivery prices for then given index",
      "request": {
        "properties": {
          "index_name": {
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "IndexName",
            "enumValues": [
              "ada_usd",
              "avax_usd",
              "btc_usd",
              "eth_usd",
              "dot_usd",
              "luna_usd",
              "matic_usd",
              "sol_usd",
              "usdc_usd",
              "xrp_usd",
              "ada_usdc",
              "avax_usdc",
              "btc_usdc",
              "eth_usdc",
              "dot_usdc",
              "luna_usdc",
              "matic_usdc",
              "sol_usdc",
              "xrp_usdc",
              "btcdvol_usdc",
              "ethdvol_usdc"
            ]
          },
          "offset": {
            "description": "The offset for pagination, default - `0`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 0
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "IndexDeliveryPrices",
        "properties": {
          "data": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "IndexDeliveryPrice",
            "properties": {
              "date": {
                "description": "The event date with year, month and day",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "delivery_price": {
                "description": "The settlement price for the instrument. Only when `state = closed`",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "records_total": {
            "description": "Available delivery prices",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_funding_chart_data": {
      "category": "Market data",
      "description": "Retrieve the list of the latest PERPETUAL funding chart points within a given time period.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "length": {
            "description": "Specifies time period. `8h` - 8 hours, `24h` - 24 hours, `1m` - 1 month",
            "required": true,
            "apiDataType": "string",
            "dataType": "FundingChartPeriod",
            "enumValues": [
              "8h",
              "24h",
              "1m"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "FundingChartData",
        "properties": {
          "current_interest": {
            "description": "Current interest",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "data": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "FundingChartDataEntry",
            "properties": {
              "index_price": {
                "description": "Current index price",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "interest_8h": {
                "description": "Historical interest 8h value",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              }
            }
          },
          "interest_8h": {
            "description": "Current interest 8h",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_funding_rate_history": {
      "category": "Market data",
      "description": "Retrieves hourly historical interest rate for requested PERPETUAL instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "start_timestamp": {
            "description": "The earliest timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "end_timestamp": {
            "description": "The most recent timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "FundingRateHistoryEntry",
        "properties": {
          "index_price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "interest_1h": {
            "description": "1hour interest rate",
            "required": true,
            "apiDataType": "float",
            "dataType": "float"
          },
          "interest_8h": {
            "description": "8hour interest rate",
            "required": true,
            "apiDataType": "float",
            "dataType": "float"
          },
          "prev_index_price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "public/get_funding_rate_value": {
      "category": "Market data",
      "description": "Retrieves interest rate value for requested period. Applicable only for PERPETUAL instruments.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "start_timestamp": {
            "description": "The earliest timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "end_timestamp": {
            "description": "The most recent timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "float",
        "dataType": "float"
      }
    },
    "public/get_historical_volatility": {
      "category": "Market data",
      "description": "Provides information about historical volatility for given cryptocurrency.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of [timestamp, value]",
        "dataType": "array",
        "arrayDataType": "[timestamp, value]"
      }
    },
    "public/get_index": {
      "category": "Market data",
      "description": "Retrieves the current index price for the instruments, for the selected currency.",
      "deprecated": true,
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "GetIndexResponse",
        "properties": {
          "BTC": {
            "description": "The current index price for BTC-USD (only for selected currency == BTC)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "ETH": {
            "description": "The current index price for ETH-USD (only for selected currency == ETH)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "edp": {
            "description": "Estimated delivery price for the currency. For more details, see Documentation > General > Expiration Price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_index_price": {
      "category": "Market data",
      "description": "Retrieves the current index price value for given index name.",
      "request": {
        "properties": {
          "index_name": {
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "IndexName",
            "enumValues": [
              "ada_usd",
              "avax_usd",
              "btc_usd",
              "eth_usd",
              "dot_usd",
              "luna_usd",
              "matic_usd",
              "sol_usd",
              "usdc_usd",
              "xrp_usd",
              "ada_usdc",
              "avax_usdc",
              "btc_usdc",
              "eth_usdc",
              "dot_usdc",
              "luna_usdc",
              "matic_usdc",
              "sol_usdc",
              "xrp_usdc",
              "btcdvol_usdc",
              "ethdvol_usdc"
            ],
            "enumIsSuggestion": true,
            "valueLookupSource": "public/get_index_price_names"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "IndexPriceData",
        "properties": {
          "estimated_delivery_price": {
            "description": "Estimated delivery price for the market. For more details, see Documentation > General > Expiration Price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "index_price": {
            "description": "Value of requested index",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_index_price_names": {
      "category": "Market data",
      "description": "Retrieves the identifiers of all supported Price Indexes",
      "response": {
        "required": true,
        "apiDataType": "array of string",
        "dataType": "array",
        "arrayDataType": "string"
      }
    },
    "public/get_instrument": {
      "category": "Market data",
      "description": "Retrieves information about instrument",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "Instrument",
        "properties": {
          "base_currency": {
            "description": "The underlying currency being traded.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "block_trade_commission": {
            "description": "Block Trade commission for instrument",
            "apiDataType": "number",
            "dataType": "number"
          },
          "contract_size": {
            "description": "Contract size for instrument",
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "counter_currency": {
            "description": "Counter currency for the instrument.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "creation_timestamp": {
            "description": "The time when the instrument was first created (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "expiration_timestamp": {
            "description": "The time when the instrument will expire (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "future_type": {
            "description": "Future type (only for futures)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "instrument_id": {
            "description": "Instrument ID",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_active": {
            "description": "Indicates if the instrument can currently be traded.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "kind": {
            "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"future_combo\"`, `\"option_combo\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_leverage": {
            "description": "Maximal leverage for instrument, for futures only",
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "maker_commission": {
            "description": "Maker commission for instrument",
            "apiDataType": "number",
            "dataType": "number"
          },
          "min_trade_amount": {
            "description": "Minimum amount for trading. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "apiDataType": "number",
            "dataType": "number"
          },
          "option_type": {
            "description": "The option type (only for options)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "price_index": {
            "description": "Name of price index that is used for this instrument",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "quote_currency": {
            "description": "The currency in which the instrument prices are quoted.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "settlement_currency": {
            "description": "Settlement currency for the instrument.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "settlement_period": {
            "description": "The settlement period.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "strike": {
            "description": "The strike value. (only for options)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "taker_commission": {
            "description": "Taker commission for instrument",
            "apiDataType": "number",
            "dataType": "number"
          },
          "tick_size": {
            "description": "specifies minimal price change and, as follows, the number of decimal places for instrument prices",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_instruments": {
      "category": "Market data",
      "description": "Retrieves available trading instruments. This method can be used to see which instruments are available for trading, or which instruments have recently expired.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Instrument kind, if not provided instruments of all kinds are considered",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "expired": {
            "description": "Set to true to show recently expired instruments instead of active ones.",
            "apiDataType": "boolean",
            "dataType": "boolean"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "Instrument",
        "properties": {
          "base_currency": {
            "description": "The underlying currency being traded.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "block_trade_commission": {
            "description": "Block Trade commission for instrument",
            "apiDataType": "number",
            "dataType": "number"
          },
          "contract_size": {
            "description": "Contract size for instrument",
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "counter_currency": {
            "description": "Counter currency for the instrument.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "creation_timestamp": {
            "description": "The time when the instrument was first created (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "expiration_timestamp": {
            "description": "The time when the instrument will expire (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "future_type": {
            "description": "Future type (only for futures)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "instrument_id": {
            "description": "Instrument ID",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_active": {
            "description": "Indicates if the instrument can currently be traded.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "kind": {
            "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"future_combo\"`, `\"option_combo\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_leverage": {
            "description": "Maximal leverage for instrument, for futures only",
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "maker_commission": {
            "description": "Maker commission for instrument",
            "apiDataType": "number",
            "dataType": "number"
          },
          "min_trade_amount": {
            "description": "Minimum amount for trading. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "apiDataType": "number",
            "dataType": "number"
          },
          "option_type": {
            "description": "The option type (only for options)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "price_index": {
            "description": "Name of price index that is used for this instrument",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "quote_currency": {
            "description": "The currency in which the instrument prices are quoted.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "settlement_currency": {
            "description": "Settlement currency for the instrument.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "settlement_period": {
            "description": "The settlement period.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "strike": {
            "description": "The strike value. (only for options)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "taker_commission": {
            "description": "Taker commission for instrument",
            "apiDataType": "number",
            "dataType": "number"
          },
          "tick_size": {
            "description": "specifies minimal price change and, as follows, the number of decimal places for instrument prices",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_last_settlements_by_currency": {
      "category": "Market data",
      "description": "Retrieves historical settlement, delivery and bankruptcy events coming from all instruments within given currency.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "type": {
            "description": "Settlement type",
            "apiDataType": "string",
            "dataType": "SettlementType",
            "enumValues": [
              "settlement",
              "delivery",
              "bankruptcy"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `20`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 20
          },
          "continuation": {
            "description": "Continuation token for pagination",
            "apiDataType": "string",
            "dataType": "string"
          },
          "search_start_timestamp": {
            "description": "The latest timestamp to return result for (milliseconds since the UNIX epoch)",
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "SettlementPage",
        "properties": {
          "continuation": {
            "description": "Continuation token for pagination.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "settlements": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "SettlementEntry",
            "properties": {
              "funded": {
                "description": "funded amount (bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "funding": {
                "description": "funding (in base currency ; settlement for perpetual product only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "index_price": {
                "description": "underlying index price at time of event (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "instrument name (settlement and delivery only)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "mark price for at the settlement time (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "position": {
                "description": "position size (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "profit and loss (in base currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_bankruptcy": {
                "description": "value of session bankruptcy (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_profit_loss": {
                "description": "total value of session profit and losses (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_tax": {
                "description": "total amount of paid taxes/fees (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_tax_rate": {
                "description": "rate of paid taxes/fees (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "socialized": {
                "description": "the amount of the socialized losses (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "type": {
                "description": "The type of settlement. `settlement`, `delivery` or `bankruptcy`.",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          }
        }
      }
    },
    "public/get_last_settlements_by_instrument": {
      "category": "Market data",
      "description": "Retrieves historical public settlement, delivery and bankruptcy events filtered by instrument name.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "Settlement type",
            "apiDataType": "string",
            "dataType": "SettlementType",
            "enumValues": [
              "settlement",
              "delivery",
              "bankruptcy"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `20`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 20
          },
          "continuation": {
            "description": "Continuation token for pagination",
            "apiDataType": "string",
            "dataType": "string"
          },
          "search_start_timestamp": {
            "description": "The latest timestamp to return result for (milliseconds since the UNIX epoch)",
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "SettlementPage",
        "properties": {
          "continuation": {
            "description": "Continuation token for pagination.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "settlements": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "SettlementEntry",
            "properties": {
              "funded": {
                "description": "funded amount (bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "funding": {
                "description": "funding (in base currency ; settlement for perpetual product only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "index_price": {
                "description": "underlying index price at time of event (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "instrument name (settlement and delivery only)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "mark price for at the settlement time (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "position": {
                "description": "position size (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "profit and loss (in base currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_bankruptcy": {
                "description": "value of session bankruptcy (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_profit_loss": {
                "description": "total value of session profit and losses (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_tax": {
                "description": "total amount of paid taxes/fees (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_tax_rate": {
                "description": "rate of paid taxes/fees (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "socialized": {
                "description": "the amount of the socialized losses (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "type": {
                "description": "The type of settlement. `settlement`, `delivery` or `bankruptcy`.",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          }
        }
      }
    },
    "public/get_last_trades_by_currency": {
      "category": "Market data",
      "description": "Retrieve the latest trades that have occurred for instruments in a specific currency symbol.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "start_id": {
            "description": "The ID number of the first trade to be returned",
            "apiDataType": "string",
            "dataType": "string"
          },
          "end_id": {
            "description": "The ID number of the last trade to be returned",
            "apiDataType": "string",
            "dataType": "string"
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "include_old": {
            "description": "Include trades older than a few recent days, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "sorting": {
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "apiDataType": "string",
            "dataType": "UserTradeSortDirection",
            "enumValues": [
              "asc",
              "desc",
              "default"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "PublicTradesPage",
        "properties": {
          "has_more": {
            "description": "",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "PublicTrade",
            "properties": {
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              }
            }
          }
        }
      }
    },
    "public/get_last_trades_by_currency_and_time": {
      "category": "Market data",
      "description": "Retrieve the latest trades that have occurred for instruments in a specific currency symbol and within given time range.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "start_timestamp": {
            "description": "The earliest timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "end_timestamp": {
            "description": "The most recent timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "include_old": {
            "description": "Include trades older than a few recent days, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "sorting": {
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "apiDataType": "string",
            "dataType": "UserTradeSortDirection",
            "enumValues": [
              "asc",
              "desc",
              "default"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "PublicTradesPage",
        "properties": {
          "has_more": {
            "description": "",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "PublicTrade",
            "properties": {
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              }
            }
          }
        }
      }
    },
    "public/get_last_trades_by_instrument": {
      "category": "Market data",
      "description": "Retrieve the latest trades that have occurred for a specific instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "start_seq": {
            "description": "The sequence number of the first trade to be returned",
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "end_seq": {
            "description": "The sequence number of the last trade to be returned",
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "include_old": {
            "description": "Include trades older than a few recent days, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "sorting": {
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "apiDataType": "string",
            "dataType": "UserTradeSortDirection",
            "enumValues": [
              "asc",
              "desc",
              "default"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "PublicTradesPage",
        "properties": {
          "has_more": {
            "description": "",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "PublicTrade",
            "properties": {
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              }
            }
          }
        }
      }
    },
    "public/get_last_trades_by_instrument_and_time": {
      "category": "Market data",
      "description": "Retrieve the latest trades that have occurred for a specific instrument and within given time range.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "start_timestamp": {
            "description": "The earliest timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "end_timestamp": {
            "description": "The most recent timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "include_old": {
            "description": "Include trades older than a few recent days, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "sorting": {
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "apiDataType": "string",
            "dataType": "UserTradeSortDirection",
            "enumValues": [
              "asc",
              "desc",
              "default"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "PublicTradesPage",
        "properties": {
          "has_more": {
            "description": "",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "PublicTrade",
            "properties": {
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              }
            }
          }
        }
      }
    },
    "public/get_mark_price_history": {
      "category": "Market data",
      "description": "Public request for 5min history of markprice values for the instrument. For now the markprice history is available only for a subset of options which take part in the volatility index calculations. All other instruments, futures and perpetuals will return empty list.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "start_timestamp": {
            "description": "The earliest timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "end_timestamp": {
            "description": "The most recent timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      },
      "response": {
        "description": "Markprice history values as an array of arrays with 2 values each. The inner values correspond to the timestamp in ms and the markprice itself.",
        "required": true,
        "apiDataType": "array",
        "dataType": "array",
        "arrayDataType": "[timestamp, value]"
      }
    },
    "public/get_order_book": {
      "category": "Market data",
      "description": "Retrieves the order book, along with other market values for a given instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "The instrument name for which to retrieve the order book, see [`public/get_instruments`](https://docs.deribit.com/#public-get_instruments) to obtain instrument names.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "depth": {
            "description": "The number of entries to return for bids and asks.",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "OrderBook",
        "properties": {
          "ask_iv": {
            "description": "(Only for option) implied volatility for best ask",
            "apiDataType": "number",
            "dataType": "number"
          },
          "asks": {
            "description": "List of asks",
            "required": true,
            "apiDataType": "array of [price, amount]",
            "dataType": "array",
            "arrayDataType": "[price, amount]"
          },
          "best_ask_amount": {
            "description": "It represents the requested order size of all best asks",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_ask_price": {
            "description": "The current best ask price, `null` if there aren't any asks",
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_amount": {
            "description": "It represents the requested order size of all best bids",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_price": {
            "description": "The current best bid price, `null` if there aren't any bids",
            "apiDataType": "number",
            "dataType": "number"
          },
          "bid_iv": {
            "description": "(Only for option) implied volatility for best bid",
            "apiDataType": "number",
            "dataType": "number"
          },
          "bids": {
            "description": "List of bids",
            "required": true,
            "apiDataType": "array of [price, amount]",
            "dataType": "array",
            "arrayDataType": "[price, amount]"
          },
          "current_funding": {
            "description": "Current funding (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "delivery_price": {
            "description": "The settlement price for the instrument. Only when `state = closed`",
            "apiDataType": "number",
            "dataType": "number"
          },
          "funding_8h": {
            "description": "Funding 8h (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "greeks": {
            "description": "Only for options",
            "apiDataType": "object",
            "dataType": "Greeks",
            "properties": {
              "delta": {
                "description": "(Only for option) The delta value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "gamma": {
                "description": "(Only for option) The gamma value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "rho": {
                "description": "(Only for option) The rho value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "theta": {
                "description": "(Only for option) The theta value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "vega": {
                "description": "(Only for option) The vega value for the option",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "index_price": {
            "description": "Current index price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interest_rate": {
            "description": "Interest rate used in implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "last_price": {
            "description": "The price for the last trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_iv": {
            "description": "(Only for option) implied volatility for mark price",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_price": {
            "description": "The mark price for the instrument",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "max_price": {
            "description": "The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "min_price": {
            "description": "The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "open_interest": {
            "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "settlement_price": {
            "description": "The settlement price for the instrument. Only when `state = open`",
            "apiDataType": "number",
            "dataType": "number"
          },
          "state": {
            "description": "The state of the order book. Possible values are `open` and `closed`.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "stats": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "Statistics",
            "properties": {
              "high": {
                "description": "Highest price during 24h",
                "apiDataType": "number",
                "dataType": "number"
              },
              "low": {
                "description": "Lowest price during 24h",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price_change": {
                "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
                "apiDataType": "number",
                "dataType": "number"
              },
              "volume": {
                "description": "Volume during last 24h in base currency",
                "apiDataType": "number",
                "dataType": "number"
              },
              "volume_usd": {
                "description": "Volume in usd (futures only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "underlying_index": {
            "description": "Name of the underlying future, or `index_price` (options only)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "underlying_price": {
            "description": "Underlying price for implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_order_book_by_instrument_id": {
      "category": "Market data",
      "description": "Retrieves the order book, along with other market values for a given instrument ID.",
      "request": {
        "properties": {
          "instrument_id": {
            "description": "The instrument ID for which to retrieve the order book, see [`public/get_instruments`](https://docs.deribit.com/#public-get_instruments) to obtain instrument IDs.",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "depth": {
            "description": "The number of entries to return for bids and asks.",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "OrderBook",
        "properties": {
          "ask_iv": {
            "description": "(Only for option) implied volatility for best ask",
            "apiDataType": "number",
            "dataType": "number"
          },
          "asks": {
            "description": "List of asks",
            "required": true,
            "apiDataType": "array of [price, amount]",
            "dataType": "array",
            "arrayDataType": "[price, amount]"
          },
          "best_ask_amount": {
            "description": "It represents the requested order size of all best asks",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_ask_price": {
            "description": "The current best ask price, `null` if there aren't any asks",
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_amount": {
            "description": "It represents the requested order size of all best bids",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_price": {
            "description": "The current best bid price, `null` if there aren't any bids",
            "apiDataType": "number",
            "dataType": "number"
          },
          "bid_iv": {
            "description": "(Only for option) implied volatility for best bid",
            "apiDataType": "number",
            "dataType": "number"
          },
          "bids": {
            "description": "List of bids",
            "required": true,
            "apiDataType": "array of [price, amount]",
            "dataType": "array",
            "arrayDataType": "[price, amount]"
          },
          "current_funding": {
            "description": "Current funding (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "delivery_price": {
            "description": "The settlement price for the instrument. Only when `state = closed`",
            "apiDataType": "number",
            "dataType": "number"
          },
          "funding_8h": {
            "description": "Funding 8h (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "greeks": {
            "description": "Only for options",
            "apiDataType": "object",
            "dataType": "Greeks",
            "properties": {
              "delta": {
                "description": "(Only for option) The delta value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "gamma": {
                "description": "(Only for option) The gamma value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "rho": {
                "description": "(Only for option) The rho value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "theta": {
                "description": "(Only for option) The theta value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "vega": {
                "description": "(Only for option) The vega value for the option",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "index_price": {
            "description": "Current index price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interest_rate": {
            "description": "Interest rate used in implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "last_price": {
            "description": "The price for the last trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_iv": {
            "description": "(Only for option) implied volatility for mark price",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_price": {
            "description": "The mark price for the instrument",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "max_price": {
            "description": "The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "min_price": {
            "description": "The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "open_interest": {
            "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "settlement_price": {
            "description": "The settlement price for the instrument. Only when `state = open`",
            "apiDataType": "number",
            "dataType": "number"
          },
          "state": {
            "description": "The state of the order book. Possible values are `open` and `closed`.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "stats": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "Statistics",
            "properties": {
              "high": {
                "description": "Highest price during 24h",
                "apiDataType": "number",
                "dataType": "number"
              },
              "low": {
                "description": "Lowest price during 24h",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price_change": {
                "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
                "apiDataType": "number",
                "dataType": "number"
              },
              "volume": {
                "description": "Volume during last 24h in base currency",
                "apiDataType": "number",
                "dataType": "number"
              },
              "volume_usd": {
                "description": "Volume in usd (futures only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "underlying_index": {
            "description": "Name of the underlying future, or `index_price` (options only)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "underlying_price": {
            "description": "Underlying price for implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_rfqs": {
      "category": "Market data",
      "description": "Retrieve active RFQs for instruments in given currency.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Instrument kind, if not provided instruments of all kinds are considered",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "RfqEntry",
        "properties": {
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "last_rfq_timestamp": {
            "description": "The timestamp of last RFQ (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "side": {
            "description": "Side - `buy` or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "traded_volume": {
            "description": "Volume traded since last RFQ",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_trade_volumes": {
      "category": "Market data",
      "description": "Retrieves aggregated 24h trade volumes for different instrument types and currencies.",
      "request": {
        "properties": {
          "extended": {
            "description": "Request for extended statistics. Including also 7 and 30 days volumes (default false)",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "AggregatedTradeVolume",
        "properties": {
          "calls_volume": {
            "description": "Total 24h trade volume for call options.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "calls_volume_30d": {
            "description": "Total 30d trade volume for call options.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "calls_volume_7d": {
            "description": "Total 7d trade volume for call options.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "futures_volume": {
            "description": "Total 24h trade volume for futures.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "futures_volume_30d": {
            "description": "Total 30d trade volume for futures.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "futures_volume_7d": {
            "description": "Total 7d trade volume for futures.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "puts_volume": {
            "description": "Total 24h trade volume for put options.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "puts_volume_30d": {
            "description": "Total 30d trade volume for put options.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "puts_volume_7d": {
            "description": "Total 7d trade volume for put options.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "public/get_tradingview_chart_data": {
      "category": "Market data",
      "description": "Publicly available market data used to generate a TradingView candle chart.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "start_timestamp": {
            "description": "The earliest timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "end_timestamp": {
            "description": "The most recent timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "resolution": {
            "description": "Chart bars resolution given in full minutes or keyword `1D` (only some specific resolutions are supported)",
            "required": true,
            "apiDataType": "string",
            "dataType": "ChartBarResolution",
            "enumValues": [
              "1",
              "3",
              "5",
              "10",
              "15",
              "30",
              "60",
              "120",
              "180",
              "360",
              "720",
              "1D"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "TradingViewChartData",
        "properties": {
          "close": {
            "description": "List of prices at close (one per candle)",
            "required": true,
            "apiDataType": "array of number",
            "dataType": "array",
            "arrayDataType": "number"
          },
          "cost": {
            "description": "List of cost bars (volume in quote currency, one per candle)",
            "required": true,
            "apiDataType": "array of number",
            "dataType": "array",
            "arrayDataType": "number"
          },
          "high": {
            "description": "List of highest price levels (one per candle)",
            "required": true,
            "apiDataType": "array of number",
            "dataType": "array",
            "arrayDataType": "number"
          },
          "low": {
            "description": "List of lowest price levels (one per candle)",
            "required": true,
            "apiDataType": "array of number",
            "dataType": "array",
            "arrayDataType": "number"
          },
          "open": {
            "description": "List of prices at open (one per candle)",
            "required": true,
            "apiDataType": "array of number",
            "dataType": "array",
            "arrayDataType": "number"
          },
          "status": {
            "description": "Status of the query: `ok` or `no_data`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "ticks": {
            "description": "Values of the time axis given in milliseconds since UNIX epoch",
            "required": true,
            "apiDataType": "array of integer",
            "dataType": "array",
            "arrayDataType": "integer"
          },
          "volume": {
            "description": "List of volume bars (in base currency, one per candle)",
            "required": true,
            "apiDataType": "array of number",
            "dataType": "array",
            "arrayDataType": "number"
          }
        }
      }
    },
    "public/get_volatility_index_data": {
      "category": "Market data",
      "description": "Public market data request for volatility index candles.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "start_timestamp": {
            "description": "The earliest timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "end_timestamp": {
            "description": "The most recent timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "resolution": {
            "description": "Time resolution given in full seconds or keyword `1D` (only some specific resolutions are supported)",
            "required": true,
            "apiDataType": "string",
            "dataType": "VolatilityIndexResolution",
            "enumValues": [
              "1",
              "60",
              "3600",
              "43200",
              "1D"
            ]
          }
        }
      },
      "response": {
        "description": "Volatility index candles.",
        "required": true,
        "apiDataType": "object",
        "dataType": "VolatilityIndexPage",
        "properties": {
          "continuation": {
            "description": "Continuation - to be used as the `end_timestamp` parameter on the next request. `NULL` when no continuation.",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "data": {
            "description": "Candles as an array of arrays with 5 values each. The inner values correspond to the timestamp in ms, open, high, low, and close values of the volatility index correspondingly.",
            "required": true,
            "apiDataType": "array",
            "dataType": "array",
            "arrayDataType": "VolatilityIndexCandle"
          }
        }
      }
    },
    "public/ticker": {
      "category": "Market data",
      "description": "Get ticker for an instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "TickerData",
        "properties": {
          "ask_iv": {
            "description": "(Only for option) implied volatility for best ask",
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_ask_amount": {
            "description": "It represents the requested order size of all best asks",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_ask_price": {
            "description": "The current best ask price, `null` if there aren't any asks",
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_amount": {
            "description": "It represents the requested order size of all best bids",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_price": {
            "description": "The current best bid price, `null` if there aren't any bids",
            "apiDataType": "number",
            "dataType": "number"
          },
          "bid_iv": {
            "description": "(Only for option) implied volatility for best bid",
            "apiDataType": "number",
            "dataType": "number"
          },
          "current_funding": {
            "description": "Current funding (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "delivery_price": {
            "description": "The settlement price for the instrument. Only when `state = closed`",
            "apiDataType": "number",
            "dataType": "number"
          },
          "estimated_delivery_price": {
            "description": "Estimated delivery price for the market. For more details, see Contract Specification > General Documentation > Expiration Price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "funding_8h": {
            "description": "Funding 8h (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "greeks": {
            "description": "Only for options",
            "apiDataType": "object",
            "dataType": "Greeks",
            "properties": {
              "delta": {
                "description": "(Only for option) The delta value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "gamma": {
                "description": "(Only for option) The gamma value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "rho": {
                "description": "(Only for option) The rho value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "theta": {
                "description": "(Only for option) The theta value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "vega": {
                "description": "(Only for option) The vega value for the option",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "index_price": {
            "description": "Current index price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interest_rate": {
            "description": "Interest rate used in implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "interest_value": {
            "description": "Value used to calculate `realized_funding` in positions (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "last_price": {
            "description": "The price for the last trade",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_iv": {
            "description": "(Only for option) implied volatility for mark price",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_price": {
            "description": "The mark price for the instrument",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "max_price": {
            "description": "The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "min_price": {
            "description": "The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "open_interest": {
            "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "settlement_price": {
            "description": "The settlement price for the instrument. Only when `state = open`",
            "apiDataType": "number",
            "dataType": "number"
          },
          "state": {
            "description": "The state of the order book. Possible values are `open` and `closed`.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "stats": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "Statistics",
            "properties": {
              "high": {
                "description": "Highest price during 24h",
                "apiDataType": "number",
                "dataType": "number"
              },
              "low": {
                "description": "Lowest price during 24h",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price_change": {
                "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
                "apiDataType": "number",
                "dataType": "number"
              },
              "volume": {
                "description": "Volume during last 24h in base currency",
                "apiDataType": "number",
                "dataType": "number"
              },
              "volume_usd": {
                "description": "Volume in usd (futures only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "underlying_index": {
            "description": "Name of the underlying future, or `index_price` (options only)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "underlying_price": {
            "description": "Underlying price for implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "private/buy": {
      "category": "Trading",
      "description": "Places a buy order for an instrument.",
      "request": {
        "dataType": "UserOrderRequest",
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "type": {
            "description": "The order type, default: `\"limit\"`",
            "apiDataType": "string",
            "dataType": "BuySellOrderType",
            "enumValues": [
              "limit",
              "stop_limit",
              "take_limit",
              "market",
              "stop_market",
              "take_market",
              "market_limit",
              "trailing_stop"
            ],
            "defaultValue": "limit"
          },
          "label": {
            "description": "user defined label for the order (maximum 64 characters)",
            "apiDataType": "string",
            "dataType": "string",
            "maxLength": 64
          },
          "price": {
            "description": "The order price in base currency (Only for limit and stop_limit orders)\n\n When adding order with advanced=usd, the field price should be the option price value in USD.\n\n When adding order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%",
            "apiDataType": "number",
            "dataType": "number"
          },
          "time_in_force": {
            "description": "Specifies how long the order remains in effect. Default `\"good_til_cancelled\"`\n\n - `\"good_til_cancelled\"` - unfilled order remains in order book until cancelled\n- `\"good_til_day\"` - unfilled order remains in order book till the end of the trading session\n- `\"fill_or_kill\"` - execute a transaction immediately and completely or not at all\n- `\"immediate_or_cancel\"` - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled",
            "apiDataType": "string",
            "dataType": "TimeInForce",
            "enumValues": [
              "good_til_cancelled",
              "good_til_day",
              "fill_or_kill",
              "immediate_or_cancel"
            ],
            "defaultValue": "good_til_cancelled"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other customers, `0` for invisible order",
            "apiDataType": "number",
            "dataType": "number"
          },
          "post_only": {
            "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the spread.\n\n Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "reject_post_only": {
            "description": "If an order is considered post-only and this field is set to true then the order is put to order book unmodified or request is rejected.\n\n Only valid in combination with `\"post_only\"` set to true",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "reduce_only": {
            "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "trigger_price": {
            "description": "Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered",
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Defines the trigger type. Required for `\"Stop-Loss\"`, `\"Take-Profit\"` and `\"Trailing\"` trigger orders",
            "apiDataType": "string",
            "dataType": "TriggerType",
            "enumValues": [
              "index_price",
              "mark_price",
              "last_price"
            ]
          },
          "advanced": {
            "description": "Advanced option order type. (Only for options)",
            "apiDataType": "string",
            "dataType": "AdvancedOptionOrderType",
            "enumValues": [
              "usd",
              "implv"
            ]
          },
          "mmp": {
            "description": "Order MMP flag, only for order_type 'limit'",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "valid_until": {
            "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use [/public/time](https://docs.deribit.com/#public-get_time) method to obtain current server time.",
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserOrderTrades",
        "properties": {
          "order": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "UserOrder",
            "properties": {
              "mmp_cancelled": {
                "description": "`true` if order was cancelled by mmp trigger (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "max_show": {
                "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reject_post_only": {
                "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "api": {
                "description": "`true` if created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "amount": {
                "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "web": {
                "description": "`true` if created via Deribit frontend (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "advanced": {
                "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "triggered": {
                "description": "Whether the trigger order has been triggered",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade": {
                "description": "`true` if order made from block_trade trade, added only in that case.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "original_order_type": {
                "description": "Original order type. Optional field",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_offset": {
                "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mmp": {
                "description": "`true` if the order is a MMP order, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "time_in_force": {
                "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "auto_replaced": {
                "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "last_update_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "post_only": {
                "description": "`true` for post-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "replaced": {
                "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "filled_amount": {
                "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price": {
                "description": "Average fill price of the order",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "order_id": {
                "description": "Unique order identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "reduce_only": {
                "description": "`true` for reduce-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "commission": {
                "description": "Commission paid so far (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "app_name": {
                "description": "The name of the application that placed the order on behalf of the user (optional).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "label": {
                "description": "User defined label (up to 64 characters)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_order_id": {
                "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_price": {
                "description": "Trigger price (Only for future trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "creation_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "is_liquidation": {
                "description": "`true` if order was automatically created during liquidation",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_type": {
                "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "usd": {
                "description": "Option price in USD (Only if `advanced=\"usd\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger_reference_price": {
                "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "risk_reducing": {
                "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "implv": {
                "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger": {
                "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/sell": {
      "category": "Trading",
      "description": "Places a sell order for an instrument.",
      "request": {
        "dataType": "UserOrderRequest",
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "type": {
            "description": "The order type, default: `\"limit\"`",
            "apiDataType": "string",
            "dataType": "BuySellOrderType",
            "enumValues": [
              "limit",
              "stop_limit",
              "take_limit",
              "market",
              "stop_market",
              "take_market",
              "market_limit",
              "trailing_stop"
            ],
            "defaultValue": "limit"
          },
          "label": {
            "description": "user defined label for the order (maximum 64 characters)",
            "apiDataType": "string",
            "dataType": "string",
            "maxLength": 64
          },
          "price": {
            "description": "The order price in base currency (Only for limit and stop_limit orders)\n\n When adding order with advanced=usd, the field price should be the option price value in USD.\n\n When adding order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%",
            "apiDataType": "number",
            "dataType": "number"
          },
          "time_in_force": {
            "description": "Specifies how long the order remains in effect. Default `\"good_til_cancelled\"`\n\n - `\"good_til_cancelled\"` - unfilled order remains in order book until cancelled\n- `\"good_til_day\"` - unfilled order remains in order book till the end of the trading session\n- `\"fill_or_kill\"` - execute a transaction immediately and completely or not at all\n- `\"immediate_or_cancel\"` - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled",
            "apiDataType": "string",
            "dataType": "TimeInForce",
            "enumValues": [
              "good_til_cancelled",
              "good_til_day",
              "fill_or_kill",
              "immediate_or_cancel"
            ],
            "defaultValue": "good_til_cancelled"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other customers, `0` for invisible order",
            "apiDataType": "number",
            "dataType": "number"
          },
          "post_only": {
            "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just above the spread.\n\n Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "reject_post_only": {
            "description": "If an order is considered post-only and this field is set to true then the order is put to order book unmodified or request is rejected.\n\n Only valid in combination with `\"post_only\"` set to true",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "reduce_only": {
            "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "trigger_price": {
            "description": "Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered",
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Defines the trigger type. Required for `\"Stop-Loss\"`, `\"Take-Profit\"` and `\"Trailing\"` trigger orders",
            "apiDataType": "string",
            "dataType": "TriggerType",
            "enumValues": [
              "index_price",
              "mark_price",
              "last_price"
            ]
          },
          "advanced": {
            "description": "Advanced option order type. (Only for options)",
            "apiDataType": "string",
            "dataType": "AdvancedOptionOrderType",
            "enumValues": [
              "usd",
              "implv"
            ]
          },
          "mmp": {
            "description": "Order MMP flag, only for order_type 'limit'",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "valid_until": {
            "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use [/public/time](https://docs.deribit.com/#public-get_time) method to obtain current server time.",
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserOrderTrades",
        "properties": {
          "order": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "UserOrder",
            "properties": {
              "mmp_cancelled": {
                "description": "`true` if order was cancelled by mmp trigger (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "max_show": {
                "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reject_post_only": {
                "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "api": {
                "description": "`true` if created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "amount": {
                "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "web": {
                "description": "`true` if created via Deribit frontend (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "advanced": {
                "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "triggered": {
                "description": "Whether the trigger order has been triggered",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade": {
                "description": "`true` if order made from block_trade trade, added only in that case.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "original_order_type": {
                "description": "Original order type. Optional field",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_offset": {
                "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mmp": {
                "description": "`true` if the order is a MMP order, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "time_in_force": {
                "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "auto_replaced": {
                "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "last_update_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "post_only": {
                "description": "`true` for post-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "replaced": {
                "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "filled_amount": {
                "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price": {
                "description": "Average fill price of the order",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "order_id": {
                "description": "Unique order identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "reduce_only": {
                "description": "`true` for reduce-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "commission": {
                "description": "Commission paid so far (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "app_name": {
                "description": "The name of the application that placed the order on behalf of the user (optional).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "label": {
                "description": "User defined label (up to 64 characters)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_order_id": {
                "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_price": {
                "description": "Trigger price (Only for future trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "creation_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "is_liquidation": {
                "description": "`true` if order was automatically created during liquidation",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_type": {
                "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "usd": {
                "description": "Option price in USD (Only if `advanced=\"usd\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger_reference_price": {
                "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "risk_reducing": {
                "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "implv": {
                "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger": {
                "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/edit": {
      "category": "Trading",
      "description": "Change price, amount and/or other properties of an order.",
      "request": {
        "properties": {
          "order_id": {
            "description": "The order id",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "The order price in base currency.\n\n When editing an option order with advanced=usd, the field price should be the option price value in USD.\n\n When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%",
            "apiDataType": "number",
            "dataType": "number"
          },
          "post_only": {
            "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below or above the spread (accordingly to the original order type).\n\n Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "reduce_only": {
            "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "reject_post_only": {
            "description": "If an order is considered post-only and this field is set to true then the order is put to order book unmodified or request is rejected.\n\n Only valid in combination with `\"post_only\"` set to true",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "advanced": {
            "description": "Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options)",
            "apiDataType": "string",
            "dataType": "AdvancedOptionOrderType",
            "enumValues": [
              "usd",
              "implv"
            ]
          },
          "trigger_price": {
            "description": "Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "Order MMP flag, only for order_type 'limit'",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "valid_until": {
            "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use [/public/time](https://docs.deribit.com/#public-get_time) method to obtain current server time.",
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserOrderTrades",
        "properties": {
          "order": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "UserOrder",
            "properties": {
              "mmp_cancelled": {
                "description": "`true` if order was cancelled by mmp trigger (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "max_show": {
                "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reject_post_only": {
                "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "api": {
                "description": "`true` if created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "amount": {
                "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "web": {
                "description": "`true` if created via Deribit frontend (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "advanced": {
                "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "triggered": {
                "description": "Whether the trigger order has been triggered",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade": {
                "description": "`true` if order made from block_trade trade, added only in that case.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "original_order_type": {
                "description": "Original order type. Optional field",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_offset": {
                "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mmp": {
                "description": "`true` if the order is a MMP order, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "time_in_force": {
                "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "auto_replaced": {
                "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "last_update_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "post_only": {
                "description": "`true` for post-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "replaced": {
                "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "filled_amount": {
                "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price": {
                "description": "Average fill price of the order",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "order_id": {
                "description": "Unique order identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "reduce_only": {
                "description": "`true` for reduce-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "commission": {
                "description": "Commission paid so far (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "app_name": {
                "description": "The name of the application that placed the order on behalf of the user (optional).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "label": {
                "description": "User defined label (up to 64 characters)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_order_id": {
                "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_price": {
                "description": "Trigger price (Only for future trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "creation_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "is_liquidation": {
                "description": "`true` if order was automatically created during liquidation",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_type": {
                "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "usd": {
                "description": "Option price in USD (Only if `advanced=\"usd\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger_reference_price": {
                "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "risk_reducing": {
                "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "implv": {
                "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger": {
                "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/edit_by_label": {
      "category": "Trading",
      "description": "Change price, amount and/or other properties of an order with given label. It works only when there is one open order with this label",
      "request": {
        "properties": {
          "label": {
            "description": "user defined label for the order (maximum 64 characters)",
            "apiDataType": "string",
            "dataType": "string",
            "maxLength": 64
          },
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "The order price in base currency.\n\n When editing an option order with advanced=usd, the field price should be the option price value in USD.\n\n When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%",
            "apiDataType": "number",
            "dataType": "number"
          },
          "post_only": {
            "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below or above the spread (accordingly to the original order type).\n\n Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "reduce_only": {
            "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "reject_post_only": {
            "description": "If an order is considered post-only and this field is set to true then the order is put to order book unmodified or request is rejected.\n\n Only valid in combination with `\"post_only\"` set to true",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "advanced": {
            "description": "Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options)",
            "apiDataType": "string",
            "dataType": "AdvancedOptionOrderType",
            "enumValues": [
              "usd",
              "implv"
            ]
          },
          "trigger_price": {
            "description": "Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "Order MMP flag, only for order_type 'limit'",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "valid_until": {
            "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use [/public/time](https://docs.deribit.com/#public-get_time) method to obtain current server time.",
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserOrderTrades",
        "properties": {
          "order": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "UserOrder",
            "properties": {
              "mmp_cancelled": {
                "description": "`true` if order was cancelled by mmp trigger (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "max_show": {
                "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reject_post_only": {
                "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "api": {
                "description": "`true` if created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "amount": {
                "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "web": {
                "description": "`true` if created via Deribit frontend (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "advanced": {
                "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "triggered": {
                "description": "Whether the trigger order has been triggered",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade": {
                "description": "`true` if order made from block_trade trade, added only in that case.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "original_order_type": {
                "description": "Original order type. Optional field",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_offset": {
                "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mmp": {
                "description": "`true` if the order is a MMP order, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "time_in_force": {
                "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "auto_replaced": {
                "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "last_update_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "post_only": {
                "description": "`true` for post-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "replaced": {
                "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "filled_amount": {
                "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price": {
                "description": "Average fill price of the order",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "order_id": {
                "description": "Unique order identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "reduce_only": {
                "description": "`true` for reduce-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "commission": {
                "description": "Commission paid so far (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "app_name": {
                "description": "The name of the application that placed the order on behalf of the user (optional).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "label": {
                "description": "User defined label (up to 64 characters)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_order_id": {
                "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_price": {
                "description": "Trigger price (Only for future trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "creation_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "is_liquidation": {
                "description": "`true` if order was automatically created during liquidation",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_type": {
                "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "usd": {
                "description": "Option price in USD (Only if `advanced=\"usd\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger_reference_price": {
                "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "risk_reducing": {
                "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "implv": {
                "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger": {
                "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/cancel": {
      "category": "Trading",
      "description": "Cancel an order, specified by order id",
      "request": {
        "dataType": "UserOrderIdRequest",
        "properties": {
          "order_id": {
            "description": "The order id",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserOrder",
        "properties": {
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reject_post_only": {
            "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "api": {
            "description": "`true` if created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "web": {
            "description": "`true` if created via Deribit frontend (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "advanced": {
            "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "triggered": {
            "description": "Whether the trigger order has been triggered",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade": {
            "description": "`true` if order made from block_trade trade, added only in that case.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "original_order_type": {
            "description": "Original order type. Optional field",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "time_in_force": {
            "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "last_update_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "post_only": {
            "description": "`true` for post-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "filled_amount": {
            "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price": {
            "description": "Average fill price of the order",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "reduce_only": {
            "description": "`true` for reduce-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "commission": {
            "description": "Commission paid so far (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "label": {
            "description": "User defined label (up to 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_price": {
            "description": "Trigger price (Only for future trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_liquidation": {
            "description": "`true` if order was automatically created during liquidation",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_type": {
            "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "usd": {
            "description": "Option price in USD (Only if `advanced=\"usd\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_reference_price": {
            "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "implv": {
            "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/cancel_all": {
      "category": "Trading",
      "description": "This method cancels all users orders and trigger orders within all currencies and instrument kinds.",
      "request": {
        "properties": {
          "detailed": {
            "description": "When detailed is set to `true` output format is changed. See [description](https://docs.deribit.com/#detailed-response-for-private-cancel_all-and-private-cancel_by_label-methods). Default: `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          }
        }
      },
      "response": {
        "description": "Total number of successfully cancelled orders",
        "required": true,
        "apiDataType": "number",
        "dataType": "number"
      }
    },
    "private/cancel_all_by_currency": {
      "category": "Trading",
      "description": "Cancels all orders by currency, optionally filtered by instrument kind and/or order type.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "type": {
            "description": "Order type - `limit`, `stop`, `take`, `trigger_all` or `all`, default - `all`",
            "apiDataType": "string",
            "dataType": "CancelOrderType",
            "enumValues": [
              "all",
              "limit",
              "trigger_all",
              "stop",
              "take",
              "trailing_stop"
            ],
            "defaultValue": "all"
          },
          "detailed": {
            "description": "When detailed is set to `true` output format is changed. See [description](https://docs.deribit.com/#detailed-response-for-private-cancel_all-and-private-cancel_by_label-methods). Default: `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          }
        }
      },
      "response": {
        "description": "Total number of successfully cancelled orders",
        "required": true,
        "apiDataType": "number",
        "dataType": "number"
      }
    },
    "private/cancel_all_by_instrument": {
      "category": "Trading",
      "description": "Cancels all orders by instrument, optionally filtered by order type.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "Order type - `limit`, `stop`, `take`, `trigger_all` or `all`, default - `all`",
            "apiDataType": "string",
            "dataType": "CancelOrderType",
            "enumValues": [
              "all",
              "limit",
              "trigger_all",
              "stop",
              "take",
              "trailing_stop"
            ],
            "defaultValue": "all"
          },
          "detailed": {
            "description": "When detailed is set to `true` output format is changed. See [description](https://docs.deribit.com/#detailed-response-for-private-cancel_all-and-private-cancel_by_label-methods). Default: `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "include_combos": {
            "description": "When set to `true` orders in combo instruments affecting given position will also be cancelled. Default: `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          }
        }
      },
      "response": {
        "description": "Total number of successfully cancelled orders",
        "required": true,
        "apiDataType": "number",
        "dataType": "number"
      }
    },
    "private/cancel_by_label": {
      "category": "Trading",
      "description": "Cancels orders by label. All user's orders (trigger orders too), with given label are canceled in all currencies or in one given currency (in this case currency queue is used)",
      "request": {
        "properties": {
          "label": {
            "description": "user defined label for the order (maximum 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string",
            "maxLength": 64
          },
          "currency": {
            "description": "The currency symbol",
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "description": "Total number of successfully cancelled orders",
        "required": true,
        "apiDataType": "number",
        "dataType": "number"
      }
    },
    "private/close_position": {
      "category": "Trading",
      "description": "Makes closing position reduce only order .",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "The order type",
            "required": true,
            "apiDataType": "string",
            "dataType": "ClosePositionOrderType",
            "enumValues": [
              "limit",
              "market"
            ]
          },
          "price": {
            "description": "Optional price for limit order.",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserOrderTrades",
        "properties": {
          "order": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "UserOrder",
            "properties": {
              "mmp_cancelled": {
                "description": "`true` if order was cancelled by mmp trigger (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "max_show": {
                "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reject_post_only": {
                "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "api": {
                "description": "`true` if created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "amount": {
                "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "web": {
                "description": "`true` if created via Deribit frontend (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "advanced": {
                "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "triggered": {
                "description": "Whether the trigger order has been triggered",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade": {
                "description": "`true` if order made from block_trade trade, added only in that case.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "original_order_type": {
                "description": "Original order type. Optional field",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_offset": {
                "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mmp": {
                "description": "`true` if the order is a MMP order, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "time_in_force": {
                "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "auto_replaced": {
                "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "last_update_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "post_only": {
                "description": "`true` for post-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "replaced": {
                "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "filled_amount": {
                "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price": {
                "description": "Average fill price of the order",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "order_id": {
                "description": "Unique order identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "reduce_only": {
                "description": "`true` for reduce-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "commission": {
                "description": "Commission paid so far (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "app_name": {
                "description": "The name of the application that placed the order on behalf of the user (optional).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "label": {
                "description": "User defined label (up to 64 characters)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_order_id": {
                "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_price": {
                "description": "Trigger price (Only for future trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "creation_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "is_liquidation": {
                "description": "`true` if order was automatically created during liquidation",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_type": {
                "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "usd": {
                "description": "Option price in USD (Only if `advanced=\"usd\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger_reference_price": {
                "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "risk_reducing": {
                "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "implv": {
                "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger": {
                "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/get_margins": {
      "category": "Trading",
      "description": "Get margins for given instrument, amount and price.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "Amount, integer for future, float for option. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "InstrumentMargin",
        "properties": {
          "buy": {
            "description": "Margin when buying",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "max_price": {
            "description": "The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "min_price": {
            "description": "The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "sell": {
            "description": "Margin when selling",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "private/get_mmp_config": {
      "category": "Trading",
      "description": "Get current config for MMP",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "MmpConfig",
        "properties": {
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "delta_limit": {
            "description": "Delta limit",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "frozen_time": {
            "description": "MMP frozen time in seconds, if set to 0 manual reset is required",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "interval": {
            "description": "MMP Interval in seconds, if set to 0 MMP is disabled",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "quantity_limit": {
            "description": "Quantity limit",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "private/get_open_orders_by_currency": {
      "category": "Trading",
      "description": "Retrieves list of user's open orders.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Instrument kind, if not provided instruments of all kinds are considered",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "type": {
            "description": "Order type, default - `all`",
            "apiDataType": "string",
            "dataType": "OpenOrderType",
            "enumValues": [
              "all",
              "limit",
              "trigger_all",
              "stop_all",
              "stop_limit",
              "stop_market",
              "take_all",
              "take_limit",
              "take_market",
              "trailing_all",
              "trailing_stop"
            ],
            "defaultValue": "all"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserOrder",
        "properties": {
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reject_post_only": {
            "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "api": {
            "description": "`true` if created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "web": {
            "description": "`true` if created via Deribit frontend (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "advanced": {
            "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "triggered": {
            "description": "Whether the trigger order has been triggered",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade": {
            "description": "`true` if order made from block_trade trade, added only in that case.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "original_order_type": {
            "description": "Original order type. Optional field",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "time_in_force": {
            "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "last_update_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "post_only": {
            "description": "`true` for post-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "filled_amount": {
            "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price": {
            "description": "Average fill price of the order",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "reduce_only": {
            "description": "`true` for reduce-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "commission": {
            "description": "Commission paid so far (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "label": {
            "description": "User defined label (up to 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_price": {
            "description": "Trigger price (Only for future trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_liquidation": {
            "description": "`true` if order was automatically created during liquidation",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_type": {
            "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "usd": {
            "description": "Option price in USD (Only if `advanced=\"usd\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_reference_price": {
            "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "implv": {
            "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_open_orders_by_instrument": {
      "category": "Trading",
      "description": "Retrieves list of user's open orders within given Instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "Order type, default - `all`",
            "apiDataType": "string",
            "dataType": "OpenOrderType",
            "enumValues": [
              "all",
              "limit",
              "trigger_all",
              "stop_all",
              "stop_limit",
              "stop_market",
              "take_all",
              "take_limit",
              "take_market",
              "trailing_all",
              "trailing_stop"
            ],
            "defaultValue": "all"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserOrder",
        "properties": {
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reject_post_only": {
            "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "api": {
            "description": "`true` if created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "web": {
            "description": "`true` if created via Deribit frontend (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "advanced": {
            "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "triggered": {
            "description": "Whether the trigger order has been triggered",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade": {
            "description": "`true` if order made from block_trade trade, added only in that case.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "original_order_type": {
            "description": "Original order type. Optional field",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "time_in_force": {
            "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "last_update_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "post_only": {
            "description": "`true` for post-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "filled_amount": {
            "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price": {
            "description": "Average fill price of the order",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "reduce_only": {
            "description": "`true` for reduce-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "commission": {
            "description": "Commission paid so far (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "label": {
            "description": "User defined label (up to 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_price": {
            "description": "Trigger price (Only for future trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_liquidation": {
            "description": "`true` if order was automatically created during liquidation",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_type": {
            "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "usd": {
            "description": "Option price in USD (Only if `advanced=\"usd\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_reference_price": {
            "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "implv": {
            "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_order_history_by_currency": {
      "category": "Trading",
      "description": "Retrieves history of orders that have been partially or fully filled.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `20`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 20
          },
          "offset": {
            "description": "The offset for pagination, default - `0`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 0
          },
          "include_old": {
            "description": "Include in result orders older than 2 days, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "include_unfilled": {
            "description": "Include in result fully unfilled closed orders, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserOrder",
        "properties": {
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reject_post_only": {
            "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "api": {
            "description": "`true` if created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "web": {
            "description": "`true` if created via Deribit frontend (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "advanced": {
            "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "triggered": {
            "description": "Whether the trigger order has been triggered",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade": {
            "description": "`true` if order made from block_trade trade, added only in that case.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "original_order_type": {
            "description": "Original order type. Optional field",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "time_in_force": {
            "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "last_update_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "post_only": {
            "description": "`true` for post-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "filled_amount": {
            "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price": {
            "description": "Average fill price of the order",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "reduce_only": {
            "description": "`true` for reduce-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "commission": {
            "description": "Commission paid so far (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "label": {
            "description": "User defined label (up to 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_price": {
            "description": "Trigger price (Only for future trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_liquidation": {
            "description": "`true` if order was automatically created during liquidation",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_type": {
            "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "usd": {
            "description": "Option price in USD (Only if `advanced=\"usd\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_reference_price": {
            "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "implv": {
            "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_order_history_by_instrument": {
      "category": "Trading",
      "description": "Retrieves history of orders that have been partially or fully filled.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "count": {
            "description": "Number of requested items, default - `20`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 20
          },
          "offset": {
            "description": "The offset for pagination, default - `0`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 0
          },
          "include_old": {
            "description": "Include in result orders older than 2 days, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "include_unfilled": {
            "description": "Include in result fully unfilled closed orders, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserOrder",
        "properties": {
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reject_post_only": {
            "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "api": {
            "description": "`true` if created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "web": {
            "description": "`true` if created via Deribit frontend (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "advanced": {
            "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "triggered": {
            "description": "Whether the trigger order has been triggered",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade": {
            "description": "`true` if order made from block_trade trade, added only in that case.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "original_order_type": {
            "description": "Original order type. Optional field",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "time_in_force": {
            "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "last_update_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "post_only": {
            "description": "`true` for post-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "filled_amount": {
            "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price": {
            "description": "Average fill price of the order",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "reduce_only": {
            "description": "`true` for reduce-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "commission": {
            "description": "Commission paid so far (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "label": {
            "description": "User defined label (up to 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_price": {
            "description": "Trigger price (Only for future trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_liquidation": {
            "description": "`true` if order was automatically created during liquidation",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_type": {
            "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "usd": {
            "description": "Option price in USD (Only if `advanced=\"usd\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_reference_price": {
            "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "implv": {
            "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_order_margin_by_ids": {
      "category": "Trading",
      "description": "Retrieves initial margins of given orders",
      "request": {
        "properties": {
          "ids": {
            "description": "Ids of orders",
            "required": true,
            "apiDataType": "array",
            "dataType": "array",
            "arrayDataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "OrderInitialMargin",
        "properties": {
          "initial_margin": {
            "description": "Initial margin of order, in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_order_state": {
      "category": "Trading",
      "description": "Retrieve the current state of an order.",
      "request": {
        "dataType": "UserOrderIdRequest",
        "properties": {
          "order_id": {
            "description": "The order id",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserOrder",
        "properties": {
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reject_post_only": {
            "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "api": {
            "description": "`true` if created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "web": {
            "description": "`true` if created via Deribit frontend (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "advanced": {
            "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "triggered": {
            "description": "Whether the trigger order has been triggered",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade": {
            "description": "`true` if order made from block_trade trade, added only in that case.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "original_order_type": {
            "description": "Original order type. Optional field",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "time_in_force": {
            "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "last_update_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "post_only": {
            "description": "`true` for post-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "filled_amount": {
            "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price": {
            "description": "Average fill price of the order",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "reduce_only": {
            "description": "`true` for reduce-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "commission": {
            "description": "Commission paid so far (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "label": {
            "description": "User defined label (up to 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_price": {
            "description": "Trigger price (Only for future trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_liquidation": {
            "description": "`true` if order was automatically created during liquidation",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_type": {
            "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "usd": {
            "description": "Option price in USD (Only if `advanced=\"usd\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_reference_price": {
            "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "implv": {
            "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_trigger_order_history": {
      "category": "Trading",
      "description": "Retrieves detailed log of the user's trigger orders.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "instrument_name": {
            "description": "Instrument name",
            "apiDataType": "string",
            "dataType": "string"
          },
          "count": {
            "description": "Number of requested items, default - `20`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 20
          },
          "continuation": {
            "description": "Continuation token for pagination",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "TriggerOrderHistoryPage",
        "properties": {
          "continuation": {
            "description": "Continuation token for pagination.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "entries": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "TriggerOrderHistoryEntry",
            "properties": {
              "amount": {
                "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "last_update_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "order_id": {
                "description": "Unique order identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_state": {
                "description": "Order state: `\"triggered\"`, `\"cancelled\"`, or `\"rejected\"` with rejection reason (e.g. `\"rejected:reduce_direction\"`).",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Requested order type: `\"limit` or `\"market\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` for post-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` for reduce-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "request": {
                "description": "Type of last request performed on the trigger order by user or system. `\"cancel\"` - when order was cancelled, `\"trigger:order\"` - when trigger order spawned market or limit order after being triggered",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trigger": {
                "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_offset": {
                "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger_order_id": {
                "description": "Id of the user order used for the trigger-order reference before triggering",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_price": {
                "description": "Trigger price (Only for future trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/get_user_trades_by_currency": {
      "category": "Trading",
      "description": "Retrieve the latest user trades that have occurred for instruments in a specific currency symbol.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "start_id": {
            "description": "The ID number of the first trade to be returned",
            "apiDataType": "string",
            "dataType": "string"
          },
          "end_id": {
            "description": "The ID number of the last trade to be returned",
            "apiDataType": "string",
            "dataType": "string"
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "include_old": {
            "description": "Include trades older than a few recent days, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "sorting": {
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "apiDataType": "string",
            "dataType": "UserTradeSortDirection",
            "enumValues": [
              "asc",
              "desc",
              "default"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserTrades",
        "properties": {
          "has_more": {
            "description": "",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/get_user_trades_by_currency_and_time": {
      "category": "Trading",
      "description": "Retrieve the latest user trades that have occurred for instruments in a specific currency symbol and within given time range.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "start_timestamp": {
            "description": "The earliest timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "end_timestamp": {
            "description": "The most recent timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "include_old": {
            "description": "Include trades older than a few recent days, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "sorting": {
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "apiDataType": "string",
            "dataType": "UserTradeSortDirection",
            "enumValues": [
              "asc",
              "desc",
              "default"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserTrades",
        "properties": {
          "has_more": {
            "description": "",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/get_user_trades_by_instrument": {
      "category": "Trading",
      "description": "Retrieve the latest user trades that have occurred for a specific instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "start_seq": {
            "description": "The sequence number of the first trade to be returned",
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "end_seq": {
            "description": "The sequence number of the last trade to be returned",
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "include_old": {
            "description": "Include trades older than a few recent days, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "sorting": {
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "apiDataType": "string",
            "dataType": "UserTradeSortDirection",
            "enumValues": [
              "asc",
              "desc",
              "default"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserTrades",
        "properties": {
          "has_more": {
            "description": "",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/get_user_trades_by_instrument_and_time": {
      "category": "Trading",
      "description": "Retrieve the latest user trades that have occurred for a specific instrument and within given time range.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "start_timestamp": {
            "description": "The earliest timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "end_timestamp": {
            "description": "The most recent timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "include_old": {
            "description": "Include trades older than a few recent days, default - `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          },
          "sorting": {
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "apiDataType": "string",
            "dataType": "UserTradeSortDirection",
            "enumValues": [
              "asc",
              "desc",
              "default"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserTrades",
        "properties": {
          "has_more": {
            "description": "",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/get_user_trades_by_order": {
      "category": "Trading",
      "description": "Retrieve the list of user trades that was created for given order",
      "request": {
        "properties": {
          "order_id": {
            "description": "The order id",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "sorting": {
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "apiDataType": "string",
            "dataType": "UserTradeSortDirection",
            "enumValues": [
              "asc",
              "desc",
              "default"
            ]
          }
        }
      },
      "response": {
        "description": "string",
        "required": true,
        "apiDataType": "array of objects",
        "dataType": "array",
        "arrayDataType": "UserTrade"
      }
    },
    "private/reset_mmp": {
      "category": "Trading",
      "description": "Reset MMP",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/send_rfq": {
      "category": "Trading",
      "description": "Sends RFQ on a given instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "Amount",
            "apiDataType": "number",
            "dataType": "number"
          },
          "side": {
            "description": "Side - `buy` or `sell`",
            "apiDataType": "string",
            "dataType": "TradeDirection",
            "enumValues": [
              "buy",
              "sell"
            ]
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/set_mmp_config": {
      "category": "Trading",
      "description": "Set config for MMP - triggers MMP reset",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "interval": {
            "description": "MMP Interval in seconds, if set to 0 MMP is disabled",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "frozen_time": {
            "description": "MMP frozen time in seconds, if set to 0 manual reset is required",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "quantity_limit": {
            "description": "Quantity limit",
            "apiDataType": "number",
            "dataType": "number"
          },
          "delta_limit": {
            "description": "Delta limit",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/get_settlement_history_by_instrument": {
      "category": "Trading",
      "description": "Retrieves public settlement, delivery and bankruptcy events filtered by instrument name",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "Settlement type",
            "apiDataType": "string",
            "dataType": "SettlementType",
            "enumValues": [
              "settlement",
              "delivery",
              "bankruptcy"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `20`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 20
          },
          "continuation": {
            "description": "Continuation token for pagination",
            "apiDataType": "string",
            "dataType": "string"
          },
          "search_start_timestamp": {
            "description": "The latest timestamp to return result for (milliseconds since the UNIX epoch)",
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "SettlementPage",
        "properties": {
          "continuation": {
            "description": "Continuation token for pagination.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "settlements": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "SettlementEntry",
            "properties": {
              "funded": {
                "description": "funded amount (bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "funding": {
                "description": "funding (in base currency ; settlement for perpetual product only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "index_price": {
                "description": "underlying index price at time of event (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "instrument name (settlement and delivery only)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "mark price for at the settlement time (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "position": {
                "description": "position size (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "profit and loss (in base currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_bankruptcy": {
                "description": "value of session bankruptcy (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_profit_loss": {
                "description": "total value of session profit and losses (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_tax": {
                "description": "total amount of paid taxes/fees (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_tax_rate": {
                "description": "rate of paid taxes/fees (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "socialized": {
                "description": "the amount of the socialized losses (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "type": {
                "description": "The type of settlement. `settlement`, `delivery` or `bankruptcy`.",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          }
        }
      }
    },
    "private/get_settlement_history_by_currency": {
      "category": "Trading",
      "description": "Retrieves settlement, delivery and bankruptcy events that have affected your account.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "type": {
            "description": "Settlement type",
            "apiDataType": "string",
            "dataType": "SettlementType",
            "enumValues": [
              "settlement",
              "delivery",
              "bankruptcy"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `20`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 20
          },
          "continuation": {
            "description": "Continuation token for pagination",
            "apiDataType": "string",
            "dataType": "string"
          },
          "search_start_timestamp": {
            "description": "The latest timestamp to return result for (milliseconds since the UNIX epoch)",
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "SettlementPage",
        "properties": {
          "continuation": {
            "description": "Continuation token for pagination.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "settlements": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "SettlementEntry",
            "properties": {
              "funded": {
                "description": "funded amount (bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "funding": {
                "description": "funding (in base currency ; settlement for perpetual product only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "index_price": {
                "description": "underlying index price at time of event (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "instrument name (settlement and delivery only)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "mark price for at the settlement time (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "position": {
                "description": "position size (in quote currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "profit and loss (in base currency; settlement and delivery only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_bankruptcy": {
                "description": "value of session bankruptcy (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_profit_loss": {
                "description": "total value of session profit and losses (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_tax": {
                "description": "total amount of paid taxes/fees (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_tax_rate": {
                "description": "rate of paid taxes/fees (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "socialized": {
                "description": "the amount of the socialized losses (in base currency; bankruptcy only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "type": {
                "description": "The type of settlement. `settlement`, `delivery` or `bankruptcy`.",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          }
        }
      }
    },
    "public/get_combo_details": {
      "category": "Combo Books",
      "description": "Retrieves information about a combo",
      "request": {
        "properties": {
          "combo_id": {
            "description": "Combo ID",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "Combo",
        "properties": {
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "id": {
            "description": "Unique combo identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "instrument_id": {
            "description": "Instrument ID",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "legs": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "ComboLeg",
            "properties": {
              "amount": {
                "description": "Size multiplier of a leg. A negative value indicates that the trades on given leg are in opposite direction to the combo trades they originate from",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "state": {
            "description": "Combo state: `\"rfq\"`, `\"active\"`, \"`inactive`\"",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "state_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "public/get_combo_ids": {
      "category": "Combo Books",
      "description": "Retrieves available combos. This method can be used to get the list of all combos, or only the list of combos in the given state.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "state": {
            "description": "Combo state, if not provided combos of all states are considered",
            "apiDataType": "string",
            "dataType": "ComboState",
            "enumValues": [
              "rfq",
              "active",
              "inactive"
            ]
          }
        }
      },
      "response": {
        "description": "Unique combo identifier",
        "required": true,
        "apiDataType": "array of string",
        "dataType": "array",
        "arrayDataType": "string"
      }
    },
    "public/get_combos": {
      "category": "Combo Books",
      "description": "Retrieves information about active combos",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "Combo",
        "properties": {
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "id": {
            "description": "Unique combo identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "instrument_id": {
            "description": "Instrument ID",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "legs": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "ComboLeg",
            "properties": {
              "amount": {
                "description": "Size multiplier of a leg. A negative value indicates that the trades on given leg are in opposite direction to the combo trades they originate from",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "state": {
            "description": "Combo state: `\"rfq\"`, `\"active\"`, \"`inactive`\"",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "state_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/create_combo": {
      "category": "Combo Books",
      "description": "Verifies and creates a combo book or returns an existing combo matching given trades",
      "request": {
        "properties": {
          "trades": {
            "description": "List of trades used to create a combo",
            "required": true,
            "apiDataType": "array of objects",
            "dataType": "array",
            "arrayDataType": "CreateComboTrade",
            "properties": {
              "instrument_name": {
                "description": "Instrument name",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "It represents the requested trade size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "direction": {
                "description": "Direction of trade from the maker perspective",
                "required": true,
                "apiDataType": "string",
                "dataType": "TradeDirection",
                "enumValues": [
                  "buy",
                  "sell"
                ]
              }
            }
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "Combo",
        "properties": {
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "id": {
            "description": "Unique combo identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "instrument_id": {
            "description": "Instrument ID",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "legs": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "ComboLeg",
            "properties": {
              "amount": {
                "description": "Size multiplier of a leg. A negative value indicates that the trades on given leg are in opposite direction to the combo trades they originate from",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "state": {
            "description": "Combo state: `\"rfq\"`, `\"active\"`, \"`inactive`\"",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "state_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/execute_block_trade": {
      "category": "Block Trade",
      "description": "Creates block trade\n\nThe whole request have to be exact the same as in `private/verify_block_trade`, only role field should be set appropriately - it basically means that both sides have to agree on the same timestamp, nonce, trades fields and server will assure that role field is different between sides (each party accepted own role).\n\n Using the same timestamp and nonce by both sides in `private/verify_block_trade` assures that even if unintentionally both sides execute given block trade with valid counterparty_signature, the given block trade will be executed only once.",
      "request": {
        "properties": {
          "timestamp": {
            "description": "Timestamp, shared with other party (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "nonce": {
            "description": "Nonce, shared with other party",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "role": {
            "description": "Describes if user wants to be maker or taker of trades",
            "required": true,
            "apiDataType": "string",
            "dataType": "TradeRole",
            "enumValues": [
              "maker",
              "taker"
            ]
          },
          "trades": {
            "description": "List of trades for block trade",
            "required": true,
            "apiDataType": "array of objects",
            "dataType": "array",
            "arrayDataType": "BlockTradeRequestTrade",
            "properties": {
              "instrument_name": {
                "description": "Instrument name",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price for trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "amount": {
                "description": "It represents the requested trade size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "direction": {
                "description": "Direction of trade from the maker perspective",
                "required": true,
                "apiDataType": "string",
                "dataType": "TradeDirection",
                "enumValues": [
                  "buy",
                  "sell"
                ]
              }
            }
          },
          "counterparty_signature": {
            "description": "Signature of block trade generated by `private/verify_block_trade_method`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "currency": {
            "description": "The currency symbol",
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "BlockTrade",
        "properties": {
          "app_name": {
            "description": "The name of the application that executed the block trade on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "id": {
            "description": "Block trade id",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/get_block_trade": {
      "category": "Block Trade",
      "description": "Returns information about users block trade",
      "request": {
        "properties": {
          "id": {
            "description": "Block trade id",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "BlockTrade",
        "properties": {
          "app_name": {
            "description": "The name of the application that executed the block trade on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "id": {
            "description": "Block trade id",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/get_last_block_trades_by_currency": {
      "category": "Block Trade",
      "description": "Returns list of last users block trades",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `20`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 20
          },
          "start_id": {
            "description": "The id of the newest block trade to be returned",
            "apiDataType": "string",
            "dataType": "string"
          },
          "end_id": {
            "description": "The id of the oldest block trade to be returned, `start_id` is required with `end_id`",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "BlockTrade",
        "properties": {
          "app_name": {
            "description": "The name of the application that executed the block trade on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "id": {
            "description": "Block trade id",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/invalidate_block_trade_signature": {
      "category": "Block Trade",
      "description": "User at any time (before the private/execute_block_trade is called) can invalidate its own signature effectively cancelling block trade",
      "request": {
        "properties": {
          "signature": {
            "description": "Signature of block trade that will be invalidated",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/move_positions": {
      "category": "Block Trade",
      "description": "Moves positions from source subaccount to target subaccount",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "source_uid": {
            "description": "Id of source subaccount. Can be found in `My Account >> Subaccounts` tab",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "target_uid": {
            "description": "Id of target subaccount. Can be found in `My Account >> Subaccounts` tab",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "trades": {
            "description": "List of trades for position move",
            "required": true,
            "apiDataType": "array of objects",
            "dataType": "array",
            "arrayDataType": "MovePositionRequestTrade",
            "properties": {
              "instrument_name": {
                "description": "Instrument name",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price for trade - if not provided mark price of the instrument is used",
                "apiDataType": "number",
                "dataType": "number"
              },
              "amount": {
                "description": "It represents the requested trade size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH. Amount can't exceed position size.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "MovePositionResponse",
        "properties": {
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "MovePositionResponseTrade",
            "properties": {
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "source_uid": {
                "description": "Trade source uid",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "target_uid": {
                "description": "Trade target uid",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              }
            }
          }
        }
      }
    },
    "private/verify_block_trade": {
      "category": "Block Trade",
      "description": "Verifies and creates block trade signature",
      "request": {
        "properties": {
          "timestamp": {
            "description": "Timestamp, shared with other party (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "nonce": {
            "description": "Nonce, shared with other party",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "role": {
            "description": "Describes if user wants to be maker or taker of trades",
            "required": true,
            "apiDataType": "string",
            "dataType": "TradeRole",
            "enumValues": [
              "maker",
              "taker"
            ]
          },
          "trades": {
            "description": "List of trades for block trade",
            "required": true,
            "apiDataType": "array of objects",
            "dataType": "array",
            "arrayDataType": "BlockTradeRequestTrade",
            "properties": {
              "instrument_name": {
                "description": "Instrument name",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price for trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "amount": {
                "description": "It represents the requested trade size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "direction": {
                "description": "Direction of trade from the maker perspective",
                "required": true,
                "apiDataType": "string",
                "dataType": "TradeDirection",
                "enumValues": [
                  "buy",
                  "sell"
                ]
              }
            }
          },
          "currency": {
            "description": "The currency symbol",
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "VerifyBlockTradeResponse",
        "properties": {
          "signature": {
            "description": "Signature of block trade\nIt is valid only for 5 minutes “around” given timestamp",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/cancel_transfer_by_id": {
      "category": "Wallet",
      "description": "Cancel transfer",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "id": {
            "description": "Id of transfer",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserTransfer",
        "properties": {
          "amount": {
            "description": "Amount of funds in given currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "created_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "direction": {
            "description": "Transfer direction",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "id": {
            "description": "Id of transfer",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "other_side": {
            "description": "For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "state": {
            "description": "Transfer state, allowed values : `prepared`, `confirmed`, `cancelled`, `waiting_for_admin` otherwise rejection reason",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "Type of transfer: `user` - sent to user, `subaccount` - sent to subaccount",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "updated_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/cancel_withdrawal": {
      "category": "Wallet",
      "description": "Cancels withdrawal request",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "id": {
            "description": "The withdrawal id",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "Withdrawal",
        "properties": {
          "address": {
            "description": "Address in proper format for currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "Amount of funds in given currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "confirmed_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch) of withdrawal confirmation, `null` when not confirmed",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "created_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "fee": {
            "description": "Fee in currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "id": {
            "description": "Withdrawal id in Deribit system",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "priority": {
            "description": "Id of priority level",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "state": {
            "description": "Withdrawal state, allowed values : `unconfirmed`, `confirmed`, `cancelled`, `completed`, `interrupted`, `rejected`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "transaction_id": {
            "description": "Transaction id in proper format for currency, `null` if id is not available",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "updated_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/create_deposit_address": {
      "category": "Wallet",
      "description": "Creates deposit address in currency",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "description": "Object if address is created, null otherwise",
        "apiDataType": "object",
        "dataType": "DepositAddress",
        "properties": {
          "address": {
            "description": "Address in proper format for currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "Address type/purpose, allowed values : `deposit`, `withdrawal`, `transfer`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_current_deposit_address": {
      "category": "Wallet",
      "description": "Retrieve deposit address for currency",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "description": "Object if address is created, null otherwise",
        "apiDataType": "object",
        "dataType": "DepositAddress",
        "properties": {
          "address": {
            "description": "Address in proper format for currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "Address type/purpose, allowed values : `deposit`, `withdrawal`, `transfer`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_deposits": {
      "category": "Wallet",
      "description": "Retrieve the latest users deposits",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "offset": {
            "description": "The offset for pagination, default - `0`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 0
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "Deposits",
        "properties": {
          "count": {
            "description": "Total number of results available",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "data": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "Deposit",
            "properties": {
              "address": {
                "description": "Address in proper format for currency",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Amount of funds in given currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "received_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "state": {
                "description": "Deposit state, allowed values : `pending`, `completed`, `rejected`, `replaced`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "transaction_id": {
                "description": "Transaction id in proper format for currency, `null` if id is not available",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "updated_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              }
            }
          }
        }
      }
    },
    "private/get_transfers": {
      "category": "Wallet",
      "description": "Retrieve the user's transfers list",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "offset": {
            "description": "The offset for pagination, default - `0`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 0
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserTransfers",
        "properties": {
          "count": {
            "description": "Total number of results available",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "data": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTransfer",
            "properties": {
              "amount": {
                "description": "Amount of funds in given currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "created_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Transfer direction",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "id": {
                "description": "Id of transfer",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "other_side": {
                "description": "For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "state": {
                "description": "Transfer state, allowed values : `prepared`, `confirmed`, `cancelled`, `waiting_for_admin` otherwise rejection reason",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "type": {
                "description": "Type of transfer: `user` - sent to user, `subaccount` - sent to subaccount",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "updated_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              }
            }
          }
        }
      }
    },
    "private/get_withdrawals": {
      "category": "Wallet",
      "description": "Retrieve the latest users withdrawals",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          },
          "offset": {
            "description": "The offset for pagination, default - `0`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 0
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "Withdrawals",
        "properties": {
          "count": {
            "description": "Total number of results available",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "data": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "Withdrawal",
            "properties": {
              "address": {
                "description": "Address in proper format for currency",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Amount of funds in given currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "confirmed_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch) of withdrawal confirmation, `null` when not confirmed",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "created_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "Fee in currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "id": {
                "description": "Withdrawal id in Deribit system",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "priority": {
                "description": "Id of priority level",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "state": {
                "description": "Withdrawal state, allowed values : `unconfirmed`, `confirmed`, `cancelled`, `completed`, `interrupted`, `rejected`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "transaction_id": {
                "description": "Transaction id in proper format for currency, `null` if id is not available",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "updated_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              }
            }
          }
        }
      }
    },
    "private/submit_transfer_to_subaccount": {
      "category": "Wallet",
      "description": "Transfer funds to subaccount.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "amount": {
            "description": "Amount of funds to be transferred",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "destination": {
            "description": "Id of destination subaccount. Can be found in `My Account >> Subaccounts` tab",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserTransfer",
        "properties": {
          "amount": {
            "description": "Amount of funds in given currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "created_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "direction": {
            "description": "Transfer direction",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "id": {
            "description": "Id of transfer",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "other_side": {
            "description": "For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "state": {
            "description": "Transfer state, allowed values : `prepared`, `confirmed`, `cancelled`, `waiting_for_admin` otherwise rejection reason",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "Type of transfer: `user` - sent to user, `subaccount` - sent to subaccount",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "updated_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/submit_transfer_to_user": {
      "category": "Wallet",
      "description": "Transfer funds to another user.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "amount": {
            "description": "Amount of funds to be transferred",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "destination": {
            "description": "Destination wallet's address taken from address book",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserTransfer",
        "properties": {
          "amount": {
            "description": "Amount of funds in given currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "created_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "direction": {
            "description": "Transfer direction",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "id": {
            "description": "Id of transfer",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "other_side": {
            "description": "For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "state": {
            "description": "Transfer state, allowed values : `prepared`, `confirmed`, `cancelled`, `waiting_for_admin` otherwise rejection reason",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "Type of transfer: `user` - sent to user, `subaccount` - sent to subaccount",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "updated_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/withdraw": {
      "category": "Wallet",
      "description": "Creates a new withdrawal request",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "address": {
            "description": "Address in currency format, it must be in address book",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "Amount of funds to be withdrawn",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "priority": {
            "description": "Withdrawal priority, optional for BTC, default: `high`",
            "apiDataType": "string",
            "dataType": "WithdrawPriority",
            "enumValues": [
              "insane",
              "extreme_high",
              "very_high",
              "high",
              "mid",
              "low",
              "very_low"
            ],
            "defaultValue": "high"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "Withdrawal",
        "properties": {
          "address": {
            "description": "Address in proper format for currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "Amount of funds in given currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "confirmed_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch) of withdrawal confirmation, `null` when not confirmed",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "created_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "fee": {
            "description": "Fee in currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "id": {
            "description": "Withdrawal id in Deribit system",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "priority": {
            "description": "Id of priority level",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "state": {
            "description": "Withdrawal state, allowed values : `unconfirmed`, `confirmed`, `cancelled`, `completed`, `interrupted`, `rejected`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "transaction_id": {
            "description": "Transaction id in proper format for currency, `null` if id is not available",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "updated_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "public/get_announcements": {
      "category": "Account management",
      "description": "Retrieves announcements. Default \"start_timestamp\" parameter value is current timestamp, \"count\" parameter value must be between 1 and 50, default is 5.",
      "request": {
        "properties": {
          "start_timestamp": {
            "description": "The most recent timestamp to return the results for (milliseconds since the UNIX epoch)",
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "count": {
            "description": "Maximum count of returned announcements",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 5
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "Announcement",
        "properties": {
          "body": {
            "description": "The HTML body of the announcement",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "confirmation": {
            "description": "Whether the user confirmation is required for this announcement",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "A unique identifier for the announcement",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "important": {
            "description": "Whether the announcement is marked as important",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "publication_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch) of announcement publication",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "title": {
            "description": "The title of the announcement",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "public/get_portfolio_margins": {
      "category": "Account management",
      "description": "Public version of the method calculates portfolio margin info for simulated position. For concrete user position, the private version of the method must be used. The public version of the request has special restricted rate limit (not more than once per a second for the IP).",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "simulated_positions": {
            "description": "Object with positions in following form: `{InstrumentName1: Position1, InstrumentName2: Position2...}`, for example `{\"BTC-PERPETUAL\": -1000.0}` (or corresponding URI-encoding for GET). For futures in USD, for options in base currency.",
            "apiDataType": "object",
            "dataType": "SimulatedPositions"
          }
        }
      },
      "response": {
        "description": "PM details",
        "required": true,
        "apiDataType": "object",
        "dataType": "JObject"
      }
    },
    "private/change_api_key_name": {
      "category": "Account management",
      "description": "Changes name for key with given id",
      "request": {
        "properties": {
          "id": {
            "description": "Id of key",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "name": {
            "description": "Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string",
            "maxLength": 16
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ApiKeyData",
        "properties": {
          "client_id": {
            "description": "Client identifier used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "client_secret": {
            "description": "Client secret used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "default": {
            "description": "Informs whether this api key is default (field is deprecated and will be removed in the future)",
            "deprecated": true,
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "enabled": {
            "description": "Informs whether api key is enabled and can be used for authentication",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "key identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "max_scope": {
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, it value is set as none. \n\n Please check details described in [Access scope](https://docs.deribit.com/#access-scope)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "name": {
            "description": "Api key name that can be displayed in transaction log",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/change_scope_in_api_key": {
      "category": "Account management",
      "description": "Changes scope for key with given id",
      "request": {
        "properties": {
          "max_scope": {
            "description": "",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "id": {
            "description": "Id of key",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ApiKeyData",
        "properties": {
          "client_id": {
            "description": "Client identifier used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "client_secret": {
            "description": "Client secret used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "default": {
            "description": "Informs whether this api key is default (field is deprecated and will be removed in the future)",
            "deprecated": true,
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "enabled": {
            "description": "Informs whether api key is enabled and can be used for authentication",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "key identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "max_scope": {
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, it value is set as none. \n\n Please check details described in [Access scope](https://docs.deribit.com/#access-scope)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "name": {
            "description": "Api key name that can be displayed in transaction log",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/change_subaccount_name": {
      "category": "Account management",
      "description": "Change the user name for a subaccount",
      "request": {
        "properties": {
          "sid": {
            "description": "The user id for the subaccount",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "name": {
            "description": "The new user name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/create_api_key": {
      "category": "Account management",
      "description": "Creates new api key with given scope",
      "request": {
        "properties": {
          "max_scope": {
            "description": "",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "default": {
            "description": "If `true`, new key is marked as default",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "name": {
            "description": "Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)",
            "apiDataType": "string",
            "dataType": "string",
            "maxLength": 16
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ApiKeyData",
        "properties": {
          "client_id": {
            "description": "Client identifier used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "client_secret": {
            "description": "Client secret used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "default": {
            "description": "Informs whether this api key is default (field is deprecated and will be removed in the future)",
            "deprecated": true,
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "enabled": {
            "description": "Informs whether api key is enabled and can be used for authentication",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "key identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "max_scope": {
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, it value is set as none. \n\n Please check details described in [Access scope](https://docs.deribit.com/#access-scope)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "name": {
            "description": "Api key name that can be displayed in transaction log",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/create_subaccount": {
      "category": "Account management",
      "description": "Create a new subaccount",
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "CreateSubAccountResponse",
        "properties": {
          "email": {
            "description": "User email",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "id": {
            "description": "Subaccount identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "is_password": {
            "description": "`true` when password for the subaccount has been configured",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "login_enabled": {
            "description": "Informs whether login to the subaccount is enabled",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "portfolio": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "SubAccountPortfolio",
            "properties": {
              "btc": {
                "description": "",
                "required": true,
                "apiDataType": "object",
                "dataType": "SubAccountPortfolioEntry",
                "properties": {
                  "available_funds": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "available_withdrawal_funds": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "balance": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "currency": {
                    "description": "",
                    "required": true,
                    "apiDataType": "string",
                    "dataType": "string"
                  },
                  "equity": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "initial_margin": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "maintenance_margin": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "margin_balance": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  }
                }
              },
              "eth": {
                "description": "",
                "required": true,
                "apiDataType": "object",
                "dataType": "SubAccountPortfolioEntry",
                "properties": {
                  "available_funds": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "available_withdrawal_funds": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "balance": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "currency": {
                    "description": "",
                    "required": true,
                    "apiDataType": "string",
                    "dataType": "string"
                  },
                  "equity": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "initial_margin": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "maintenance_margin": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "margin_balance": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  }
                }
              }
            }
          },
          "receive_notifications": {
            "description": "When `true` - receive all notification emails on the main email",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "security_keys_enabled": {
            "description": "Whether the Security Keys authentication is enabled",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "system_name": {
            "description": "System generated user nickname",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "Account type",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "username": {
            "description": "Account name (given by user)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/disable_api_key": {
      "category": "Account management",
      "description": "Disables api key with given id",
      "request": {
        "properties": {
          "id": {
            "description": "Id of key",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ApiKeyData",
        "properties": {
          "client_id": {
            "description": "Client identifier used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "client_secret": {
            "description": "Client secret used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "default": {
            "description": "Informs whether this api key is default (field is deprecated and will be removed in the future)",
            "deprecated": true,
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "enabled": {
            "description": "Informs whether api key is enabled and can be used for authentication",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "key identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "max_scope": {
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, it value is set as none. \n\n Please check details described in [Access scope](https://docs.deribit.com/#access-scope)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "name": {
            "description": "Api key name that can be displayed in transaction log",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/enable_affiliate_program": {
      "category": "Account management",
      "description": "Enables affilate program for user",
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/enable_api_key": {
      "category": "Account management",
      "description": "Enables api key with given id",
      "request": {
        "properties": {
          "id": {
            "description": "Id of key",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ApiKeyData",
        "properties": {
          "client_id": {
            "description": "Client identifier used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "client_secret": {
            "description": "Client secret used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "default": {
            "description": "Informs whether this api key is default (field is deprecated and will be removed in the future)",
            "deprecated": true,
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "enabled": {
            "description": "Informs whether api key is enabled and can be used for authentication",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "key identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "max_scope": {
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, it value is set as none. \n\n Please check details described in [Access scope](https://docs.deribit.com/#access-scope)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "name": {
            "description": "Api key name that can be displayed in transaction log",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/get_access_log": {
      "category": "Account management",
      "description": "Lists access logs for the user",
      "request": {
        "properties": {
          "offset": {
            "description": "The offset for pagination, default - `0`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 0
          },
          "count": {
            "description": "Number of requested items, default - `10`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 10
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "AccessLogEntry",
        "properties": {
          "city": {
            "description": "City where the IP address is registered (estimated)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "country": {
            "description": "Country where the IP address is registered (estimated)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "data": {
            "description": "Optional, additional information about action, type depends on `log` value",
            "apiDataType": "object or string",
            "dataType": "object or string"
          },
          "id": {
            "description": "Unique identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "ip": {
            "description": "IP address of source that generated action",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "log": {
            "description": "Action description, values: `changed_email` - email was changed; `changed_password` - password was changed; `disabled_tfa` - TFA was disabled; `enabled_tfa` - TFA was enabled, `success` - successful login; `failure` - login failure; `enabled_subaccount_login` - login was enabled for subaccount (in `data` - subaccount uid); `disabled_subaccount_login` - login was disabled for subbaccount (in `data` - subbacount uid);`new_api_key` - API key was created (in `data` key client id); `removed_api_key` - API key was removed (in `data` key client id); `changed_scope` - scope of API key was changed (in `data` key client id); `changed_whitelist` - whitelist of API key was edited (in `data` key client id); `disabled_api_key` - API key was disabled (in `data` key client id); `enabled_api_key` - API key was enabled (in `data` key client id); `reset_api_key` - API key was reset (in `data` key client id)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/get_account_summary": {
      "category": "Account management",
      "description": "Retrieves user account summary.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "extended": {
            "description": "Include additional fields",
            "apiDataType": "boolean",
            "dataType": "boolean"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "AccountSummaryData",
        "properties": {
          "options_gamma": {
            "description": "Options summary gamma",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "projected_maintenance_margin": {
            "description": "Projected maintenance margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "system_name": {
            "description": "System generated user nickname (available when parameter `extended` = `true`)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "margin_balance": {
            "description": "The account's margin balance",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_value": {
            "description": "Options value",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "username": {
            "description": "Account name (given by user) (available when parameter `extended` = `true`)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "limits": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "MatchingEngineLimits",
            "properties": {
              "futures": {
                "description": "Field not included if limits for futures are not set.",
                "apiDataType": "object",
                "dataType": "MatchingEngineLimit",
                "properties": {
                  "burst": {
                    "description": "Maximal number of (type related) matching engine requests allowed for user in burst mode",
                    "required": true,
                    "apiDataType": "integer",
                    "dataType": "integer"
                  },
                  "rate": {
                    "description": "Number of (type related) matching engine requests per second allowed for user",
                    "required": true,
                    "apiDataType": "integer",
                    "dataType": "integer"
                  }
                }
              },
              "matching_engine": {
                "description": "",
                "required": true,
                "apiDataType": "object",
                "dataType": "MatchingEngineLimit",
                "properties": {
                  "burst": {
                    "description": "Maximal number of (type related) matching engine requests allowed for user in burst mode",
                    "required": true,
                    "apiDataType": "integer",
                    "dataType": "integer"
                  },
                  "rate": {
                    "description": "Number of (type related) matching engine requests per second allowed for user",
                    "required": true,
                    "apiDataType": "integer",
                    "dataType": "integer"
                  }
                }
              },
              "non_matching_engine": {
                "description": "",
                "required": true,
                "apiDataType": "object",
                "dataType": "MatchingEngineLimit",
                "properties": {
                  "burst": {
                    "description": "Maximal number of (type related) matching engine requests allowed for user in burst mode",
                    "required": true,
                    "apiDataType": "integer",
                    "dataType": "integer"
                  },
                  "rate": {
                    "description": "Number of (type related) matching engine requests per second allowed for user",
                    "required": true,
                    "apiDataType": "integer",
                    "dataType": "integer"
                  }
                }
              },
              "options": {
                "description": "Field not included if limits for options are not set.",
                "apiDataType": "object",
                "dataType": "MatchingEngineLimit",
                "properties": {
                  "burst": {
                    "description": "Maximal number of (type related) matching engine requests allowed for user in burst mode",
                    "required": true,
                    "apiDataType": "integer",
                    "dataType": "integer"
                  },
                  "rate": {
                    "description": "Number of (type related) matching engine requests per second allowed for user",
                    "required": true,
                    "apiDataType": "integer",
                    "dataType": "integer"
                  }
                }
              },
              "perpetuals": {
                "description": "Field not included if limits for perpetuals are not set.",
                "apiDataType": "object",
                "dataType": "MatchingEngineLimit",
                "properties": {
                  "burst": {
                    "description": "Maximal number of (type related) matching engine requests allowed for user in burst mode",
                    "required": true,
                    "apiDataType": "integer",
                    "dataType": "integer"
                  },
                  "rate": {
                    "description": "Number of (type related) matching engine requests per second allowed for user",
                    "required": true,
                    "apiDataType": "integer",
                    "dataType": "integer"
                  }
                }
              }
            }
          },
          "equity": {
            "description": "The account's current equity",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "futures_pl": {
            "description": "Futures profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "security_keys_enabled": {
            "description": "Whether Security Key authentication is enabled (available when parameter `extended` = `true`)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "fees": {
            "description": "User fees in case of any discounts (available when parameter `extended` = `true` and user has any discounts)",
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserFee",
            "properties": {
              "currency": {
                "description": "The currency the fee applies to",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee_type": {
                "description": "Fee type - `relative` if fee is calculated as a fraction of base instrument fee, `fixed` if fee is calculated solely using user fee",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "instrument_type": {
                "description": "Type of the instruments the fee applies to - `future` for future instruments (excluding perpetual), `perpetual` for future perpetual instruments, `option` for options",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "maker_fee": {
                "description": "User fee as a maker",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "taker_fee": {
                "description": "User fee as a taker",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "options_session_upl": {
            "description": "Options session unrealized profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "id": {
            "description": "Account id (available when parameter `extended` = `true`)",
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "options_vega": {
            "description": "Options summary vega",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "referrer_id": {
            "description": "Optional identifier of the referrer (of the affiliation program, and available when parameter `extended` = `true`), which link was used by this account at registration. It coincides with suffix of the affiliation link path after `/reg-`",
            "apiDataType": "string",
            "dataType": "string"
          },
          "currency": {
            "description": "The selected currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "login_enabled": {
            "description": "Whether account is loginable using email and password (available when parameter `extended` = `true` and account is a subaccount)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "type": {
            "description": "Account type (available when parameter `extended` = `true`)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "futures_session_rpl": {
            "description": "Futures session realized profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_theta": {
            "description": "Options summary theta",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "portfolio_margining_enabled": {
            "description": "`true` when portfolio margining is enabled for user",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "projected_delta_total": {
            "description": "The sum of position deltas without positions that will expire during closest expiration",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "session_rpl": {
            "description": "Session realized profit and loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "delta_total": {
            "description": "The sum of position deltas",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_pl": {
            "description": "Options profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "available_withdrawal_funds": {
            "description": "The account's available to withdrawal funds",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "maintenance_margin": {
            "description": "The maintenance margin.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "initial_margin": {
            "description": "The account's initial margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "fee_balance": {
            "description": "The account's fee balance (it can be used to pay for fees)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "interuser_transfers_enabled": {
            "description": "`true` when the inter-user transfers are enabled for user (available when parameter `extended` = `true`)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "futures_session_upl": {
            "description": "Futures session unrealized profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_session_rpl": {
            "description": "Options session realized profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "available_funds": {
            "description": "The account's available funds",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "email": {
            "description": "User email (available when parameter `extended` = `true`)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "creation_timestamp": {
            "description": "Time at which the account was created (milliseconds since the Unix epoch; available when parameter `extended` = `true`)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "session_upl": {
            "description": "Session unrealized profit and loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "total_pl": {
            "description": "Profit and loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_delta": {
            "description": "Options summary delta",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "balance": {
            "description": "The account's balance",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "projected_initial_margin": {
            "description": "Projected initial margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "deposit_address": {
            "description": "The deposit address for the account (if available)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_affiliate_program_info": {
      "category": "Account management",
      "description": "Retrieves user's affiliates count, payouts and link.",
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "AffiliateProgramInfo",
        "properties": {
          "is_enabled": {
            "description": "Status of affiliate program",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "link": {
            "description": "Affiliate link",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "number_of_affiliates": {
            "description": "Number of affiliates",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "received": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "AffiliateProgramReceivedPayouts",
            "properties": {
              "btc": {
                "description": "Total payout received in BTC",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "eth": {
                "description": "Total payout received in ETH",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/get_email_language": {
      "category": "Account management",
      "description": "Retrieves the language to be used for emails.",
      "response": {
        "description": "The abbreviation of the language",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/get_new_announcements": {
      "category": "Account management",
      "description": "Retrieves announcements that have not been marked read by the user.",
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "Announcement",
        "properties": {
          "body": {
            "description": "The HTML body of the announcement",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "confirmation": {
            "description": "Whether the user confirmation is required for this announcement",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "A unique identifier for the announcement",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "important": {
            "description": "Whether the announcement is marked as important",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "publication_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch) of announcement publication",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "title": {
            "description": "The title of the announcement",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_portfolio_margins": {
      "category": "Account management",
      "description": "Calculates portfolio margin info for simulated position or current position of the user. This request has special restricted rate limit (not more than once per a second).",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "add_positions": {
            "description": "If `true`, adds simulated positions to current positions, otherwise uses only simulated positions. By default `true`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": true
          },
          "simulated_positions": {
            "description": "Object with positions in following form: `{InstrumentName1: Position1, InstrumentName2: Position2...}`, for example `{\"BTC-PERPETUAL\": -1000.0}` (or corresponding URI-encoding for GET). For futures in USD, for options in base currency.",
            "apiDataType": "object",
            "dataType": "SimulatedPositions"
          }
        }
      },
      "response": {
        "description": "PM details",
        "required": true,
        "apiDataType": "object",
        "dataType": "JObject"
      }
    },
    "private/get_position": {
      "category": "Account management",
      "description": "Retrieve user position.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserPosition",
        "properties": {
          "average_price": {
            "description": "Average price of trades that built this position",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price_usd": {
            "description": "Only for options, average price in USD",
            "apiDataType": "number",
            "dataType": "number"
          },
          "delta": {
            "description": "Delta parameter",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "direction": {
            "description": "Direction: `buy`, `sell` or `zero`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "estimated_liquidation_price": {
            "description": "Estimated liquidation price, added only for futures, for non portfolio margining users",
            "apiDataType": "number",
            "dataType": "number"
          },
          "floating_profit_loss": {
            "description": "Floating profit or loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "floating_profit_loss_usd": {
            "description": "Only for options, floating profit or loss in USD",
            "apiDataType": "number",
            "dataType": "number"
          },
          "gamma": {
            "description": "Only for options, Gamma parameter",
            "apiDataType": "number",
            "dataType": "number"
          },
          "index_price": {
            "description": "Current index price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "initial_margin": {
            "description": "Initial margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interest_value": {
            "description": "Value used to calculate `realized_funding` (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "kind": {
            "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"future_combo\"`, `\"option_combo\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "leverage": {
            "description": "Current available leverage for future position",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "maintenance_margin": {
            "description": "Maintenance margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_price": {
            "description": "Current mark price for position's instrument",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "open_orders_margin": {
            "description": "Open orders margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "realized_funding": {
            "description": "Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments",
            "apiDataType": "number",
            "dataType": "number"
          },
          "realized_profit_loss": {
            "description": "Realized profit or loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "settlement_price": {
            "description": "Last settlement price for position's instrument 0 if instrument wasn't settled yet",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "size": {
            "description": "Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "size_currency": {
            "description": "Only for futures, position size in base currency",
            "apiDataType": "number",
            "dataType": "number"
          },
          "theta": {
            "description": "Only for options, Theta parameter",
            "apiDataType": "number",
            "dataType": "number"
          },
          "total_profit_loss": {
            "description": "Profit or loss from position",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "vega": {
            "description": "Only for options, Vega parameter",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "private/get_positions": {
      "category": "Account management",
      "description": "Retrieve user positions.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "kind": {
            "description": "Kind filter on positions",
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserPosition",
        "properties": {
          "average_price": {
            "description": "Average price of trades that built this position",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price_usd": {
            "description": "Only for options, average price in USD",
            "apiDataType": "number",
            "dataType": "number"
          },
          "delta": {
            "description": "Delta parameter",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "direction": {
            "description": "Direction: `buy`, `sell` or `zero`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "estimated_liquidation_price": {
            "description": "Estimated liquidation price, added only for futures, for non portfolio margining users",
            "apiDataType": "number",
            "dataType": "number"
          },
          "floating_profit_loss": {
            "description": "Floating profit or loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "floating_profit_loss_usd": {
            "description": "Only for options, floating profit or loss in USD",
            "apiDataType": "number",
            "dataType": "number"
          },
          "gamma": {
            "description": "Only for options, Gamma parameter",
            "apiDataType": "number",
            "dataType": "number"
          },
          "index_price": {
            "description": "Current index price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "initial_margin": {
            "description": "Initial margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interest_value": {
            "description": "Value used to calculate `realized_funding` (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "kind": {
            "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"future_combo\"`, `\"option_combo\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "leverage": {
            "description": "Current available leverage for future position",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "maintenance_margin": {
            "description": "Maintenance margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_price": {
            "description": "Current mark price for position's instrument",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "open_orders_margin": {
            "description": "Open orders margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "realized_funding": {
            "description": "Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments",
            "apiDataType": "number",
            "dataType": "number"
          },
          "realized_profit_loss": {
            "description": "Realized profit or loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "settlement_price": {
            "description": "Last settlement price for position's instrument 0 if instrument wasn't settled yet",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "size": {
            "description": "Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "size_currency": {
            "description": "Only for futures, position size in base currency",
            "apiDataType": "number",
            "dataType": "number"
          },
          "theta": {
            "description": "Only for options, Theta parameter",
            "apiDataType": "number",
            "dataType": "number"
          },
          "total_profit_loss": {
            "description": "Profit or loss from position",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "vega": {
            "description": "Only for options, Vega parameter",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "private/get_subaccounts": {
      "category": "Account management",
      "description": "Get information about subaccounts",
      "request": {
        "properties": {
          "with_portfolio": {
            "description": "",
            "apiDataType": "boolean",
            "dataType": "boolean"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "SubAccount",
        "properties": {
          "email": {
            "description": "User email",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "id": {
            "description": "Account/Subaccount identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "is_password": {
            "description": "`true` when password for the subaccount has been configured",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "login_enabled": {
            "description": "Informs whether login to the subaccount is enabled",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "not_confirmed_email": {
            "description": "New email address that has not yet been confirmed. This field is only included if `with_portfolio` == `true`.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "portfolio": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "SubAccountPortfolio",
            "properties": {
              "btc": {
                "description": "",
                "required": true,
                "apiDataType": "object",
                "dataType": "SubAccountPortfolioEntry",
                "properties": {
                  "available_funds": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "available_withdrawal_funds": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "balance": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "currency": {
                    "description": "",
                    "required": true,
                    "apiDataType": "string",
                    "dataType": "string"
                  },
                  "equity": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "initial_margin": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "maintenance_margin": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "margin_balance": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  }
                }
              },
              "eth": {
                "description": "",
                "required": true,
                "apiDataType": "object",
                "dataType": "SubAccountPortfolioEntry",
                "properties": {
                  "available_funds": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "available_withdrawal_funds": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "balance": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "currency": {
                    "description": "",
                    "required": true,
                    "apiDataType": "string",
                    "dataType": "string"
                  },
                  "equity": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "initial_margin": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "maintenance_margin": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  },
                  "margin_balance": {
                    "description": "",
                    "required": true,
                    "apiDataType": "number",
                    "dataType": "number"
                  }
                }
              }
            }
          },
          "receive_notifications": {
            "description": "When `true` - receive all notification emails on the main email",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "security_keys_assignments": {
            "description": "Names of assignments with Security Keys assigned",
            "required": true,
            "apiDataType": "array",
            "dataType": "array",
            "arrayDataType": "string"
          },
          "security_keys_enabled": {
            "description": "Whether the Security Keys authentication is enabled",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "system_name": {
            "description": "System generated user nickname",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "type": {
            "description": "",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "username": {
            "description": "",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "private/get_subaccounts_details": {
      "category": "Account management",
      "description": "Get subaccounts positions",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "with_open_orders": {
            "description": "Optional parameter to ask for open orders list, default: `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "SubAccountDetail",
        "properties": {
          "open_orders": {
            "description": "",
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserOrder",
            "properties": {
              "mmp_cancelled": {
                "description": "`true` if order was cancelled by mmp trigger (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "max_show": {
                "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reject_post_only": {
                "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "api": {
                "description": "`true` if created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "amount": {
                "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "web": {
                "description": "`true` if created via Deribit frontend (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "advanced": {
                "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "triggered": {
                "description": "Whether the trigger order has been triggered",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade": {
                "description": "`true` if order made from block_trade trade, added only in that case.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "original_order_type": {
                "description": "Original order type. Optional field",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_offset": {
                "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mmp": {
                "description": "`true` if the order is a MMP order, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "time_in_force": {
                "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "auto_replaced": {
                "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "last_update_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "post_only": {
                "description": "`true` for post-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "replaced": {
                "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "filled_amount": {
                "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price": {
                "description": "Average fill price of the order",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "order_id": {
                "description": "Unique order identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "reduce_only": {
                "description": "`true` for reduce-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "commission": {
                "description": "Commission paid so far (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "app_name": {
                "description": "The name of the application that placed the order on behalf of the user (optional).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "label": {
                "description": "User defined label (up to 64 characters)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_order_id": {
                "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_price": {
                "description": "Trigger price (Only for future trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "creation_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "is_liquidation": {
                "description": "`true` if order was automatically created during liquidation",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_type": {
                "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "usd": {
                "description": "Option price in USD (Only if `advanced=\"usd\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger_reference_price": {
                "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "risk_reducing": {
                "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "implv": {
                "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger": {
                "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "positions": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserPosition",
            "properties": {
              "average_price": {
                "description": "Average price of trades that built this position",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price_usd": {
                "description": "Only for options, average price in USD",
                "apiDataType": "number",
                "dataType": "number"
              },
              "delta": {
                "description": "Delta parameter",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "direction": {
                "description": "Direction: `buy`, `sell` or `zero`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "estimated_liquidation_price": {
                "description": "Estimated liquidation price, added only for futures, for non portfolio margining users",
                "apiDataType": "number",
                "dataType": "number"
              },
              "floating_profit_loss": {
                "description": "Floating profit or loss",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "floating_profit_loss_usd": {
                "description": "Only for options, floating profit or loss in USD",
                "apiDataType": "number",
                "dataType": "number"
              },
              "gamma": {
                "description": "Only for options, Gamma parameter",
                "apiDataType": "number",
                "dataType": "number"
              },
              "index_price": {
                "description": "Current index price",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "initial_margin": {
                "description": "Initial margin",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "interest_value": {
                "description": "Value used to calculate `realized_funding` (perpetual only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "kind": {
                "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"future_combo\"`, `\"option_combo\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "leverage": {
                "description": "Current available leverage for future position",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "maintenance_margin": {
                "description": "Maintenance margin",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mark_price": {
                "description": "Current mark price for position's instrument",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "open_orders_margin": {
                "description": "Open orders margin",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "realized_funding": {
                "description": "Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments",
                "apiDataType": "number",
                "dataType": "number"
              },
              "realized_profit_loss": {
                "description": "Realized profit or loss",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "settlement_price": {
                "description": "Last settlement price for position's instrument 0 if instrument wasn't settled yet",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "size": {
                "description": "Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "size_currency": {
                "description": "Only for futures, position size in base currency",
                "apiDataType": "number",
                "dataType": "number"
              },
              "theta": {
                "description": "Only for options, Theta parameter",
                "apiDataType": "number",
                "dataType": "number"
              },
              "total_profit_loss": {
                "description": "Profit or loss from position",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "vega": {
                "description": "Only for options, Vega parameter",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "uid": {
            "description": "Account/Subaccount identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      }
    },
    "private/get_transaction_log": {
      "category": "Account management",
      "description": "Retrieve the latest user trades that have occurred for a specific instrument and within given time range.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          },
          "start_timestamp": {
            "description": "The earliest timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "end_timestamp": {
            "description": "The most recent timestamp to return result for (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "query": {
            "description": "The following keywords can be used to filter the results: `trade`, `maker`, `taker`, `open`, `close`, `liquidation`, `buy`, `sell`, `withdrawal`, `delivery`, `settlement`, `deposit`, `transfer`, `option`, `future`, `correction`, `block_trade`, `swap`. Plus withdrawal or transfer addresses",
            "apiDataType": "string",
            "dataType": "string"
          },
          "count": {
            "description": "Number of requested items, default - `100`",
            "apiDataType": "integer",
            "dataType": "integer",
            "defaultValue": 100
          },
          "continuation": {
            "description": "Continuation token for pagination",
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "TransactionLogPage",
        "properties": {
          "continuation": {
            "description": "Continuation token for pagination. `NULL` when no continuation.",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "logs": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "TransactionLogEntry",
            "properties": {
              "amount": {
                "description": "The amount of traded contracts",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "balance": {
                "description": "Cash balance after the transaction",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "cashflow": {
                "description": "For futures and perpetual contracts: Realized session PNL (since last settlement). For options: the amount paid or received for the options traded.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "change": {
                "description": "Change in cash balance. For trades: fees and options premium paid/received. For settlement: Futures session PNL and perpetual session funding.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "commission": {
                "description": "Commission paid so far (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "equity": {
                "description": "Updated equity value after the transaction",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "id": {
                "description": "Unique identifier",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "info": {
                "description": "Additional information regarding transaction. Strongly dependent on the log entry type",
                "required": true,
                "apiDataType": "object",
                "dataType": "JObject",
                "properties": {}
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "interest_pl": {
                "description": "Actual funding rate of trades and settlements on perpetual instruments",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mark_price": {
                "description": "Market price during the trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "order_id": {
                "description": "Unique order identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "position": {
                "description": "Updated position size after the transaction",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Settlement/delivery price or the price level of the traded contracts",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "price_currency": {
                "description": "Currency symbol associated with the `price` field value",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "profit_as_cashflow": {
                "description": "Indicator informing whether the cashflow is waiting for settlement or not",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "session_rpl": {
                "description": "Session realized profit and loss",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "session_upl": {
                "description": "Session unrealized profit and loss",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "side": {
                "description": "One of: `short` or `long` in case of settlements, `close sell` or `close buy` in case of deliveries, `open sell`, `open buy`, `close sell`, `close buy` in case of trades",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "total_interest_pl": {
                "description": "Total session funding rate",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "type": {
                "description": "Transaction category/type. The most common are: `trade`, `deposit`, `withdrawal`, `settlement`, `delivery`, `transfer`, `swap`, `correction`. New types can be added any time in the future",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "user_id": {
                "description": "Unique user identifier",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "user_role": {
                "description": "Trade role of the user: maker or taker",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "user_seq": {
                "description": "Sequential identifier of user transaction",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "username": {
                "description": "System name or user defined subaccount alias",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          }
        }
      }
    },
    "private/get_user_locks": {
      "category": "Account management",
      "description": "Retrieves information about locks on user account",
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserLockEntry",
        "properties": {
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "enabled": {
            "description": "Value is set to 'true' when user account is locked in currency",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "message": {
            "description": "Optional information for user why his account is locked",
            "apiDataType": "text",
            "dataType": "text"
          }
        }
      }
    },
    "private/list_api_keys": {
      "category": "Account management",
      "description": "Retrieves list of api keys",
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "ApiKeyData",
        "properties": {
          "client_id": {
            "description": "Client identifier used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "client_secret": {
            "description": "Client secret used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "default": {
            "description": "Informs whether this api key is default (field is deprecated and will be removed in the future)",
            "deprecated": true,
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "enabled": {
            "description": "Informs whether api key is enabled and can be used for authentication",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "key identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "max_scope": {
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, it value is set as none. \n\n Please check details described in [Access scope](https://docs.deribit.com/#access-scope)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "name": {
            "description": "Api key name that can be displayed in transaction log",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/remove_api_key": {
      "category": "Account management",
      "description": "Removes api key",
      "request": {
        "properties": {
          "id": {
            "description": "Id of key",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/remove_subaccount": {
      "category": "Account management",
      "description": "Remove empty subaccount.",
      "request": {
        "properties": {
          "subaccount_id": {
            "description": "The user id for the subaccount",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/reset_api_key": {
      "category": "Account management",
      "description": "Resets secret in api key",
      "request": {
        "properties": {
          "id": {
            "description": "Id of key",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ApiKeyData",
        "properties": {
          "client_id": {
            "description": "Client identifier used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "client_secret": {
            "description": "Client secret used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "default": {
            "description": "Informs whether this api key is default (field is deprecated and will be removed in the future)",
            "deprecated": true,
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "enabled": {
            "description": "Informs whether api key is enabled and can be used for authentication",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "key identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "max_scope": {
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, it value is set as none. \n\n Please check details described in [Access scope](https://docs.deribit.com/#access-scope)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "name": {
            "description": "Api key name that can be displayed in transaction log",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/set_announcement_as_read": {
      "category": "Account management",
      "description": "Marks an announcement as read, so it will not be shown in `get_new_announcements`.",
      "request": {
        "properties": {
          "announcement_id": {
            "description": "the ID of the announcement",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/set_api_key_as_default": {
      "category": "Account management",
      "description": "Sets key with given id as default one for API Console",
      "deprecated": true,
      "request": {
        "properties": {
          "id": {
            "description": "Id of key",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ApiKeyData",
        "properties": {
          "client_id": {
            "description": "Client identifier used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "client_secret": {
            "description": "Client secret used for authentication",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "default": {
            "description": "Informs whether this api key is default (field is deprecated and will be removed in the future)",
            "deprecated": true,
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "enabled": {
            "description": "Informs whether api key is enabled and can be used for authentication",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "key identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "max_scope": {
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, it value is set as none. \n\n Please check details described in [Access scope](https://docs.deribit.com/#access-scope)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "name": {
            "description": "Api key name that can be displayed in transaction log",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "private/set_email_for_subaccount": {
      "category": "Account management",
      "description": "Assign an email address to a subaccount. User will receive an email with confirmation link.",
      "request": {
        "properties": {
          "sid": {
            "description": "The user id for the subaccount",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "email": {
            "description": "The email address for the subaccount",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/set_email_language": {
      "category": "Account management",
      "description": "Changes the language to be used for emails.",
      "request": {
        "properties": {
          "language": {
            "description": "The abbreviated language name. Valid values include `\"en\"`, `\"ko\"`, `\"zh\"`,  `\"ja\"`, `\"ru\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/set_password_for_subaccount": {
      "category": "Account management",
      "description": "Set the password for the subaccount",
      "request": {
        "properties": {
          "sid": {
            "description": "The user id for the subaccount",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "password": {
            "description": "The password for the subaccount",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/toggle_notifications_from_subaccount": {
      "category": "Account management",
      "description": "Enable or disable sending of notifications for the subaccount.",
      "request": {
        "properties": {
          "sid": {
            "description": "The user id for the subaccount",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "state": {
            "description": "enable (`true`) or disable (`false`) notifications",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    },
    "private/toggle_portfolio_margining": {
      "category": "Account management",
      "description": "Toggle between SM and PM models",
      "request": {
        "properties": {
          "user_id": {
            "description": "Id of a (sub)account",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "enabled": {
            "description": "Whether PM or SM should be enabled - PM while `true`, SM otherwise",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "dry_run": {
            "description": "If `true` request returns the result without switching the margining model. Default: `false`",
            "apiDataType": "boolean",
            "dataType": "boolean",
            "defaultValue": false
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "PortfolioMarginingToggleEntry",
        "properties": {
          "currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "new_state": {
            "description": "Represents portfolio state after change",
            "required": true,
            "apiDataType": "object",
            "dataType": "PortfolioMarginingToggleState",
            "properties": {
              "available_balance": {
                "description": "Available balance after change",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "initial_margin_rate": {
                "description": "Initial margin rate after change",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "maintenance_margin_rate": {
                "description": "Maintenance margin rate after change",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "old_state": {
            "description": "Represents portfolio state before change",
            "required": true,
            "apiDataType": "object",
            "dataType": "PortfolioMarginingToggleState",
            "properties": {
              "available_balance": {
                "description": "Available balance before change",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "initial_margin_rate": {
                "description": "Initial margin rate before change",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "maintenance_margin_rate": {
                "description": "Maintenance margin rate before change",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "private/toggle_subaccount_login": {
      "category": "Account management",
      "description": "Enable or disable login for a subaccount. If login is disabled and a session for the subaccount exists, this session will be terminated.",
      "request": {
        "properties": {
          "sid": {
            "description": "The user id for the subaccount",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "state": {
            "description": "enable or disable login.",
            "required": true,
            "apiDataType": "string",
            "dataType": "LoginStatus",
            "enumValues": [
              "enable",
              "disable"
            ]
          }
        }
      },
      "response": {
        "description": "Result of method execution. `ok` in case of success",
        "required": true,
        "apiDataType": "string",
        "dataType": "string"
      }
    }
  },
  "subscriptions": {
    "announcements": {
      "friendlyChannelName": "Announcements",
      "description": "General announcements concerning the Deribit platform.",
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "AnnouncementChange",
        "properties": {
          "action": {
            "description": "Action taken by the platform administrators. Published a `new` announcement, or `delete`d the old one",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "body": {
            "description": "HTML-formatted announcement body",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "confirmation": {
            "description": "Whether the user confirmation is required for this announcement",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "id": {
            "description": "Announcement's identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "important": {
            "description": "Whether the announcement is marked as important",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "publication_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch) of announcement publication",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "title": {
            "description": "Announcement's title",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "unread": {
            "description": "The number of previous unread announcements (optional, only for authorized users).",
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      }
    },
    "book.{instrument_name}.{group}.{depth}.{interval}": {
      "friendlyChannelName": "BookChangesGrouped",
      "description": "Notifies about changes to the order book for a certain instrument.\nNotifications are sent once per specified interval, with prices grouped by (rounded to) the specified group, showing the complete order book to the specified depth (number of price levels).\nThe 'asks' and the 'bids' elements in the response are both a 'list of lists'. Each element in the outer list is a list of exactly two elements: price and amount.\n<em>price</em> is a price level (USD per BTC, rounded as specified by the 'group' parameter for the susbcription).\n<em>amount</em> indicates the amount of all orders at price level. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "group": {
            "description": "Group prices (by rounding). Use `none` for no grouping.\n For ETH cryptocurrency, real `group` is divided by 100.0, e.g. given value `5` means using `0.05`\n\n Allowed values for BTC - `none`, `1`, `2`, `5`, `10`\n Allowed values for ETH - `none`, `5`, `10`, `25`, `100`, `250`",
            "required": true,
            "apiDataType": "string",
            "dataType": "PriceGrouping",
            "enumValues": [
              "none",
              "1",
              "2",
              "5",
              "10",
              "25",
              "100",
              "250"
            ]
          },
          "depth": {
            "description": "Number of price levels to be included.",
            "required": true,
            "apiDataType": "integer",
            "dataType": "PriceLevelDepth",
            "enumValues": [
              "1",
              "10",
              "20"
            ]
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval.",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval1",
            "enumValues": [
              "100ms"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "GroupedOrderBookChange",
        "properties": {
          "asks": {
            "description": "List of asks",
            "required": true,
            "apiDataType": "array of [price, amount]",
            "dataType": "array",
            "arrayDataType": "[price, amount]"
          },
          "bids": {
            "description": "List of bids",
            "required": true,
            "apiDataType": "array of [price, amount]",
            "dataType": "array",
            "arrayDataType": "[price, amount]"
          },
          "change_id": {
            "description": "id of the notification",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp of last change (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "book.{instrument_name}.{interval}": {
      "friendlyChannelName": "BookChanges",
      "description": "Notifies about changes to the order book for a certain instrument.\nThe first notification will contain the whole book (bid and ask amounts for all prices). After that there will only be information about changes to individual price levels.\nThe first notification will contain the amounts for all price levels (list of `['new', price, amount]` tuples). All following notifications will contain a list of tuples with action, price level and new amount (`[action, price, amount]`). Action can be either `new`, `change` or `delete`. \nEach notification will contain a `change_id` field, and each message except for the first one will contain a field `prev_change_id`. If `prev_change_id` is equal to the `change_id` of the previous message, this means that no messages have been missed.\nThe amount for perpetual and futures is in USD units, for options it is in corresponding cryptocurrency contracts, e.g., BTC or ETH.",
      "request": {
        "dataType": "InstrumentIntervalRequest",
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval.",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval2",
            "enumValues": [
              "100ms",
              "raw"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "OrderBookChange",
        "properties": {
          "asks": {
            "description": "The first notification will contain the amounts for all price levels (a list of [\"new\", price, amount] tuples). All following notifications will contain a list of tuples with action, price level and new amount ([action, price, amount]). Action can be `new`, `change` or `delete`.",
            "required": true,
            "apiDataType": "array of [action, price, amount]",
            "dataType": "array",
            "arrayDataType": "[action, price, amount]"
          },
          "bids": {
            "description": "(See 'asks' above.)",
            "required": true,
            "apiDataType": "array of [action, price, amount]",
            "dataType": "array",
            "arrayDataType": "[action, price, amount]"
          },
          "change_id": {
            "description": "Identifier of the notification",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "prev_change_id": {
            "description": "Identifier of the previous notification (it's __not__ included for the first notification)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "timestamp": {
            "description": "The timestamp of last change (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "type": {
            "description": "Type of notification: `snapshot` for initial, `change` for others. The field is only included in aggregated response (when input parameter `interval` != `raw`)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "chart.trades.{instrument_name}.{resolution}": {
      "friendlyChannelName": "ChartTrades",
      "description": "Publicly available market data used to generate a TradingView candle chart. During single resolution period, many events can be sent, each with updated values for the recent period.\n\n __NOTICE__ When there is no trade during the requested resolution period (e.g. 1 minute), then filling sample is generated which uses data from the last available trade candle (open and close values).",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "resolution": {
            "description": "Chart bars resolution given in full minutes or keyword `1D` (only some specific resolutions are supported)",
            "required": true,
            "apiDataType": "string",
            "dataType": "ChartBarResolution",
            "enumValues": [
              "1",
              "3",
              "5",
              "10",
              "15",
              "30",
              "60",
              "120",
              "180",
              "360",
              "720",
              "1D"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "TradingViewCandleChange",
        "properties": {
          "close": {
            "description": "The close price for the candle",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "cost": {
            "description": "Cost data for the candle",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "high": {
            "description": "The highest price level for the candle",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "low": {
            "description": "The lowest price level for the candle",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "open": {
            "description": "The open price for the candle'",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "tick": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "volume": {
            "description": "Volume data for the candle",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "deribit_price_index.{index_name}": {
      "friendlyChannelName": "DeribitPriceIndex",
      "description": "Provides information about current value (price) for Deribit Index",
      "request": {
        "dataType": "IndexNameRequest",
        "properties": {
          "index_name": {
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "IndexName",
            "enumValues": [
              "ada_usd",
              "avax_usd",
              "btc_usd",
              "eth_usd",
              "dot_usd",
              "luna_usd",
              "matic_usd",
              "sol_usd",
              "usdc_usd",
              "xrp_usd",
              "ada_usdc",
              "avax_usdc",
              "btc_usdc",
              "eth_usdc",
              "dot_usdc",
              "luna_usdc",
              "matic_usdc",
              "sol_usdc",
              "xrp_usdc",
              "btcdvol_usdc",
              "ethdvol_usdc"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "DeribitPriceIndex",
        "properties": {
          "index_name": {
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "price": {
            "description": "Current index price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "deribit_price_ranking.{index_name}": {
      "friendlyChannelName": "DeribitPriceRanking",
      "description": "Provides information about current value (price) for stock exchanges used to calculate Deribit Index",
      "request": {
        "dataType": "IndexNameRequest",
        "properties": {
          "index_name": {
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "IndexName",
            "enumValues": [
              "ada_usd",
              "avax_usd",
              "btc_usd",
              "eth_usd",
              "dot_usd",
              "luna_usd",
              "matic_usd",
              "sol_usd",
              "usdc_usd",
              "xrp_usd",
              "ada_usdc",
              "avax_usdc",
              "btc_usdc",
              "eth_usdc",
              "dot_usdc",
              "luna_usdc",
              "matic_usdc",
              "sol_usdc",
              "xrp_usdc",
              "btcdvol_usdc",
              "ethdvol_usdc"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "DeribitPriceRankingEntry",
        "properties": {
          "enabled": {
            "description": "Stock exchange status",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "identifier": {
            "description": "Stock exchange identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "original_price": {
            "description": "Index price retrieved from stock's data",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Adjusted stock exchange index price, used for Deribit price index calculations",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "timestamp": {
            "description": "The timestamp of the last update from stock exchange (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "weight": {
            "description": "The weight of the ranking given in percent",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "deribit_price_statistics.{index_name}": {
      "friendlyChannelName": "DeribitPriceStatistics",
      "description": "This subscription provides basic statistics about Deribit Index",
      "request": {
        "dataType": "IndexNameRequest",
        "properties": {
          "index_name": {
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "IndexName",
            "enumValues": [
              "ada_usd",
              "avax_usd",
              "btc_usd",
              "eth_usd",
              "dot_usd",
              "luna_usd",
              "matic_usd",
              "sol_usd",
              "usdc_usd",
              "xrp_usd",
              "ada_usdc",
              "avax_usdc",
              "btc_usdc",
              "eth_usdc",
              "dot_usdc",
              "luna_usdc",
              "matic_usdc",
              "sol_usdc",
              "xrp_usdc",
              "btcdvol_usdc",
              "ethdvol_usdc"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "DeribitPriceStatistics",
        "properties": {
          "change24h": {
            "description": "The price index change calculated between the first and last point within most recent 24 hours window",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "high24h": {
            "description": "The highest recorded price within the last 24 hours",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "high_volatility": {
            "description": "Indicates the high volatility periods on the market. The value `true` is set when the price index value drastically changed within the last 5 minutes",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "index_name": {
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "low24h": {
            "description": "The lowest recorded price within the last 24 hours",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "deribit_volatility_index.{index_name}": {
      "friendlyChannelName": "DeribitVolatilityIndex",
      "description": "Provides volatility index subscription",
      "request": {
        "properties": {
          "index_name": {
            "description": "Index identifier supported for DVOL",
            "required": true,
            "apiDataType": "string",
            "dataType": "DeribitVolatilityIndexName",
            "enumValues": [
              "btc_usd",
              "eth_usd",
              "sol_usd"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "DeribitVolatilityIndex",
        "properties": {
          "estimated_delivery": {
            "description": "Time-weighted average of the volatility near the expiration otherwise equal to the volatility field.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "index_name": {
            "description": "Index identifier supported for DVOL",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "volatility": {
            "description": "Value of the corresponding volatility",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "estimated_expiration_price.{index_name}": {
      "friendlyChannelName": "EstimatedExpirationPrice",
      "description": "Returns calculated (estimated) ending price for given index.",
      "request": {
        "dataType": "IndexNameRequest",
        "properties": {
          "index_name": {
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "IndexName",
            "enumValues": [
              "ada_usd",
              "avax_usd",
              "btc_usd",
              "eth_usd",
              "dot_usd",
              "luna_usd",
              "matic_usd",
              "sol_usd",
              "usdc_usd",
              "xrp_usd",
              "ada_usdc",
              "avax_usdc",
              "btc_usdc",
              "eth_usdc",
              "dot_usdc",
              "luna_usdc",
              "matic_usdc",
              "sol_usdc",
              "xrp_usdc",
              "btcdvol_usdc",
              "ethdvol_usdc"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "ExpirationPrice",
        "properties": {
          "is_estimated": {
            "description": "When `true` then price is given as an estimated value, otherwise it's current index price",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "left_ticks": {
            "description": "number of time ticks that are left until expiration (field added when price is estimated)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Index current or estimated price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "seconds": {
            "description": "Number of seconds till finalizing the nearest instrument",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "total_ticks": {
            "description": "number of total time ticks (field added when price is estimated)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "incremental_ticker.{instrument_name}": {
      "friendlyChannelName": "IncrementalTicker",
      "description": "Notifies about changes in instrument ticker (key information about the instrument).\nThe first notification will contain the whole ticker. After that there will only information about changes in the ticker.\nThis event is send at most once per second.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "IncrementalTickerNotification",
        "properties": {
          "ask_iv": {
            "description": "(Only for option) implied volatility for best ask",
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_ask_amount": {
            "description": "It represents the requested order size of all best asks",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_ask_price": {
            "description": "The current best ask price, `null` if there aren't any asks",
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_amount": {
            "description": "It represents the requested order size of all best bids",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_price": {
            "description": "The current best bid price, `null` if there aren't any bids",
            "apiDataType": "number",
            "dataType": "number"
          },
          "bid_iv": {
            "description": "(Only for option) implied volatility for best bid",
            "apiDataType": "number",
            "dataType": "number"
          },
          "current_funding": {
            "description": "Current funding (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "delivery_price": {
            "description": "The settlement price for the instrument. Only when `state = closed`",
            "apiDataType": "number",
            "dataType": "number"
          },
          "estimated_delivery_price": {
            "description": "Estimated delivery price for the market. For more details, see Contract Specification > General Documentation > Expiration Price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "funding_8h": {
            "description": "Funding 8h (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "greeks": {
            "description": "Only for options",
            "apiDataType": "object",
            "dataType": "Greeks",
            "properties": {
              "delta": {
                "description": "(Only for option) The delta value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "gamma": {
                "description": "(Only for option) The gamma value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "rho": {
                "description": "(Only for option) The rho value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "theta": {
                "description": "(Only for option) The theta value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "vega": {
                "description": "(Only for option) The vega value for the option",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "index_price": {
            "description": "Current index price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interest_rate": {
            "description": "Interest rate used in implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "last_price": {
            "description": "The price for the last trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_iv": {
            "description": "(Only for option) implied volatility for mark price",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_price": {
            "description": "The mark price for the instrument",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "max_price": {
            "description": "The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "min_price": {
            "description": "The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "open_interest": {
            "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "settlement_price": {
            "description": "The settlement price for the instrument. Only when `state = open`",
            "apiDataType": "number",
            "dataType": "number"
          },
          "state": {
            "description": "The state of the order book. Possible values are `open` and `closed`.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "stats": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "Statistics",
            "properties": {
              "high": {
                "description": "Highest price during 24h",
                "apiDataType": "number",
                "dataType": "number"
              },
              "low": {
                "description": "Lowest price during 24h",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price_change": {
                "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
                "apiDataType": "number",
                "dataType": "number"
              },
              "volume": {
                "description": "Volume during last 24h in base currency",
                "apiDataType": "number",
                "dataType": "number"
              },
              "volume_usd": {
                "description": "Volume in usd (futures only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "underlying_index": {
            "description": "Name of the underlying future, or `index_price` (options only)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "underlying_price": {
            "description": "Underlying price for implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "instrument.state.{kind}.{currency}": {
      "friendlyChannelName": "InstrumentState",
      "description": "Get notifications about new or terminated instruments of given kind in given currency.",
      "request": {
        "properties": {
          "kind": {
            "description": "Instrument kind or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "currency": {
            "description": "The currency symbol or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbolOrAny",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC",
              "any"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "InstrumentState",
        "properties": {
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "state": {
            "description": "State of instrument - possible values: `created`, `started`, `settled`, `closed`, `deactivated`, `terminated`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "markprice.options.{index_name}": {
      "friendlyChannelName": "MarkpriceOptions",
      "description": "Provides information about options markprices.",
      "request": {
        "dataType": "IndexNameRequest",
        "properties": {
          "index_name": {
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "IndexName",
            "enumValues": [
              "ada_usd",
              "avax_usd",
              "btc_usd",
              "eth_usd",
              "dot_usd",
              "luna_usd",
              "matic_usd",
              "sol_usd",
              "usdc_usd",
              "xrp_usd",
              "ada_usdc",
              "avax_usdc",
              "btc_usdc",
              "eth_usdc",
              "dot_usdc",
              "luna_usdc",
              "matic_usdc",
              "sol_usdc",
              "xrp_usdc",
              "btcdvol_usdc",
              "ethdvol_usdc"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "OptionMarkprice",
        "properties": {
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "iv": {
            "description": "Value of the volatility of the underlying instrument",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_price": {
            "description": "The mark price for the instrument",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "perpetual.{instrument_name}.{interval}": {
      "friendlyChannelName": "Perpetual",
      "description": "Provide current interest rate - but only for __perpetual__ instruments. Other types won't generate any notification.",
      "request": {
        "dataType": "InstrumentIntervalRequest",
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval2",
            "enumValues": [
              "100ms",
              "raw"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "PerpetualInterestRate",
        "properties": {
          "index_price": {
            "description": "Current index price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "interest": {
            "description": "Current interest",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "platform_state": {
      "friendlyChannelName": "PlatformState",
      "description": "Information about platform state.",
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "PlatformStateChange",
        "properties": {
          "locked": {
            "description": "Value is set to 'true' when index is locked on platform, sent only with `price_index` field",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "maintenance": {
            "description": "Value is set to `true` when the maintenance break begins",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "price_index": {
            "description": "Name of index that is locked or unlocked, sent only with `locked` field",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "platform_state.public_methods_state": {
      "friendlyChannelName": "PlatformPublicMethodsState",
      "description": "Information whether unauthorized public requests are allowed",
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "PlatformPublicMethodsStateChange",
        "properties": {
          "allow_unauthenticated_public_requests": {
            "description": "Value is set to 'true' when unauthorized public requests are allowed",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          }
        }
      }
    },
    "quote.{instrument_name}": {
      "friendlyChannelName": "Quote",
      "description": "Best bid/ask price and size.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "QuoteNotification",
        "properties": {
          "best_ask_amount": {
            "description": "It represents the requested order size of all best asks",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_ask_price": {
            "description": "The current best ask price, `null` if there aren't any asks",
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_amount": {
            "description": "It represents the requested order size of all best bids",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_price": {
            "description": "The current best bid price, `null` if there aren't any bids",
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "rfq.{currency}": {
      "friendlyChannelName": "RequestForQuote",
      "description": "Get notifications about RFQs for instruments in given currency.",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbolOrAny",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC",
              "any"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "RfqNotification",
        "properties": {
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "last_rfq_timestamp": {
            "description": "The timestamp of last RFQ (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "side": {
            "description": "Side - `buy` or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "state": {
            "description": "`true` when RFQ is active, `false` when inactive",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          }
        }
      }
    },
    "ticker.{instrument_name}.{interval}": {
      "friendlyChannelName": "Ticker",
      "description": "Key information about the instrument",
      "request": {
        "dataType": "InstrumentIntervalRequest",
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval2",
            "enumValues": [
              "100ms",
              "raw"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "TickerData",
        "properties": {
          "ask_iv": {
            "description": "(Only for option) implied volatility for best ask",
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_ask_amount": {
            "description": "It represents the requested order size of all best asks",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_ask_price": {
            "description": "The current best ask price, `null` if there aren't any asks",
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_amount": {
            "description": "It represents the requested order size of all best bids",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "best_bid_price": {
            "description": "The current best bid price, `null` if there aren't any bids",
            "apiDataType": "number",
            "dataType": "number"
          },
          "bid_iv": {
            "description": "(Only for option) implied volatility for best bid",
            "apiDataType": "number",
            "dataType": "number"
          },
          "current_funding": {
            "description": "Current funding (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "delivery_price": {
            "description": "The settlement price for the instrument. Only when `state = closed`",
            "apiDataType": "number",
            "dataType": "number"
          },
          "estimated_delivery_price": {
            "description": "Estimated delivery price for the market. For more details, see Contract Specification > General Documentation > Expiration Price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "funding_8h": {
            "description": "Funding 8h (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "greeks": {
            "description": "Only for options",
            "apiDataType": "object",
            "dataType": "Greeks",
            "properties": {
              "delta": {
                "description": "(Only for option) The delta value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "gamma": {
                "description": "(Only for option) The gamma value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "rho": {
                "description": "(Only for option) The rho value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "theta": {
                "description": "(Only for option) The theta value for the option",
                "apiDataType": "number",
                "dataType": "number"
              },
              "vega": {
                "description": "(Only for option) The vega value for the option",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "index_price": {
            "description": "Current index price",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interest_rate": {
            "description": "Interest rate used in implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "interest_value": {
            "description": "Value used to calculate `realized_funding` in positions (perpetual only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "last_price": {
            "description": "The price for the last trade",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_iv": {
            "description": "(Only for option) implied volatility for mark price",
            "apiDataType": "number",
            "dataType": "number"
          },
          "mark_price": {
            "description": "The mark price for the instrument",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "max_price": {
            "description": "The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "min_price": {
            "description": "The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "open_interest": {
            "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "settlement_price": {
            "description": "The settlement price for the instrument. Only when `state = open`",
            "apiDataType": "number",
            "dataType": "number"
          },
          "state": {
            "description": "The state of the order book. Possible values are `open` and `closed`.",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "stats": {
            "description": "",
            "required": true,
            "apiDataType": "object",
            "dataType": "Statistics",
            "properties": {
              "high": {
                "description": "Highest price during 24h",
                "apiDataType": "number",
                "dataType": "number"
              },
              "low": {
                "description": "Lowest price during 24h",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price_change": {
                "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
                "apiDataType": "number",
                "dataType": "number"
              },
              "volume": {
                "description": "Volume during last 24h in base currency",
                "apiDataType": "number",
                "dataType": "number"
              },
              "volume_usd": {
                "description": "Volume in usd (futures only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "underlying_index": {
            "description": "Name of the underlying future, or `index_price` (options only)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "underlying_price": {
            "description": "Underlying price for implied volatility calculations (options only)",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "trades.{instrument_name}.{interval}": {
      "friendlyChannelName": "InstrumentTrades",
      "description": "Get notifications about trades for an instrument.",
      "request": {
        "dataType": "InstrumentIntervalRequest",
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval2",
            "enumValues": [
              "100ms",
              "raw"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of objects",
        "dataType": "array",
        "arrayDataType": "PublicTrade",
        "properties": {
          "amount": {
            "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "block_trade_id": {
            "description": "Block trade id - when trade was part of block trade",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "index_price": {
            "description": "Index Price at the moment of trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "iv": {
            "description": "Option implied volatility for the price (Option only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "liquidation": {
            "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
            "apiDataType": "string",
            "dataType": "string"
          },
          "mark_price": {
            "description": "Mark Price at the moment of trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "tick_direction": {
            "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "timestamp": {
            "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "trade_id": {
            "description": "Unique (per currency) trade identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trade_seq": {
            "description": "The sequence number of the trade within instrument",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      }
    },
    "trades.{kind}.{currency}.{interval}": {
      "friendlyChannelName": "KindCurrencyTrades",
      "description": "Get notifications about trades in any instrument of a given kind and given currency.",
      "request": {
        "dataType": "KindCurrencyIntervalRequest",
        "properties": {
          "kind": {
            "description": "Instrument kind, `\"future\"` or `\"option\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "currency": {
            "description": "The currency symbol or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbolOrAny",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC",
              "any"
            ]
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval2",
            "enumValues": [
              "100ms",
              "raw"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "PublicTrade",
        "properties": {
          "amount": {
            "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "block_trade_id": {
            "description": "Block trade id - when trade was part of block trade",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "index_price": {
            "description": "Index Price at the moment of trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "iv": {
            "description": "Option implied volatility for the price (Option only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "liquidation": {
            "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
            "apiDataType": "string",
            "dataType": "string"
          },
          "mark_price": {
            "description": "Mark Price at the moment of trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "tick_direction": {
            "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "timestamp": {
            "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "trade_id": {
            "description": "Unique (per currency) trade identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trade_seq": {
            "description": "The sequence number of the trade within instrument",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          }
        }
      }
    },
    "user.access_log": {
      "friendlyChannelName": "UserAccessLog",
      "description": "Get notifications about security events related to the account",
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "AccessLogEntry",
        "properties": {
          "city": {
            "description": "City where the IP address is registered (estimated)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "country": {
            "description": "Country where the IP address is registered (estimated)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "data": {
            "description": "Optional, additional information about action, type depends on `log` value",
            "apiDataType": "object or string",
            "dataType": "object or string"
          },
          "id": {
            "description": "Unique identifier",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "ip": {
            "description": "IP address of source that generated action",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "log": {
            "description": "Action description, values: `changed_email` - email was changed; `changed_password` - password was changed; `disabled_tfa` - TFA was disabled; `enabled_tfa` - TFA was enabled, `success` - successful login; `failure` - login failure; `enabled_subaccount_login` - login was enabled for subaccount (in `data` - subaccount uid); `disabled_subaccount_login` - login was disabled for subbaccount (in `data` - subbacount uid);`new_api_key` - API key was created (in `data` key client id); `removed_api_key` - API key was removed (in `data` key client id); `changed_scope` - scope of API key was changed (in `data` key client id); `changed_whitelist` - whitelist of API key was edited (in `data` key client id); `disabled_api_key` - API key was disabled (in `data` key client id); `enabled_api_key` - API key was enabled (in `data` key client id); `reset_api_key` - API key was reset (in `data` key client id)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "user.changes.{instrument_name}.{interval}": {
      "friendlyChannelName": "UserInstrumentChanges",
      "description": "Get notifications about user's updates related to order, trades, etc. in an instrument.",
      "request": {
        "dataType": "InstrumentIntervalRequest",
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval2",
            "enumValues": [
              "100ms",
              "raw"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserChange",
        "properties": {
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "orders": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserOrder",
            "properties": {
              "mmp_cancelled": {
                "description": "`true` if order was cancelled by mmp trigger (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "max_show": {
                "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reject_post_only": {
                "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "api": {
                "description": "`true` if created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "amount": {
                "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "web": {
                "description": "`true` if created via Deribit frontend (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "advanced": {
                "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "triggered": {
                "description": "Whether the trigger order has been triggered",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade": {
                "description": "`true` if order made from block_trade trade, added only in that case.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "original_order_type": {
                "description": "Original order type. Optional field",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_offset": {
                "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mmp": {
                "description": "`true` if the order is a MMP order, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "time_in_force": {
                "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "auto_replaced": {
                "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "last_update_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "post_only": {
                "description": "`true` for post-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "replaced": {
                "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "filled_amount": {
                "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price": {
                "description": "Average fill price of the order",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "order_id": {
                "description": "Unique order identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "reduce_only": {
                "description": "`true` for reduce-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "commission": {
                "description": "Commission paid so far (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "app_name": {
                "description": "The name of the application that placed the order on behalf of the user (optional).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "label": {
                "description": "User defined label (up to 64 characters)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_order_id": {
                "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_price": {
                "description": "Trigger price (Only for future trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "creation_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "is_liquidation": {
                "description": "`true` if order was automatically created during liquidation",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_type": {
                "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "usd": {
                "description": "Option price in USD (Only if `advanced=\"usd\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger_reference_price": {
                "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "risk_reducing": {
                "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "implv": {
                "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger": {
                "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "position": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserPosition",
            "properties": {
              "average_price": {
                "description": "Average price of trades that built this position",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price_usd": {
                "description": "Only for options, average price in USD",
                "apiDataType": "number",
                "dataType": "number"
              },
              "delta": {
                "description": "Delta parameter",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "direction": {
                "description": "Direction: `buy`, `sell` or `zero`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "estimated_liquidation_price": {
                "description": "Estimated liquidation price, added only for futures, for non portfolio margining users",
                "apiDataType": "number",
                "dataType": "number"
              },
              "floating_profit_loss": {
                "description": "Floating profit or loss",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "floating_profit_loss_usd": {
                "description": "Only for options, floating profit or loss in USD",
                "apiDataType": "number",
                "dataType": "number"
              },
              "gamma": {
                "description": "Only for options, Gamma parameter",
                "apiDataType": "number",
                "dataType": "number"
              },
              "index_price": {
                "description": "Current index price",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "initial_margin": {
                "description": "Initial margin",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "interest_value": {
                "description": "Value used to calculate `realized_funding` (perpetual only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "kind": {
                "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"future_combo\"`, `\"option_combo\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "leverage": {
                "description": "Current available leverage for future position",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "maintenance_margin": {
                "description": "Maintenance margin",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mark_price": {
                "description": "Current mark price for position's instrument",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "open_orders_margin": {
                "description": "Open orders margin",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "realized_funding": {
                "description": "Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments",
                "apiDataType": "number",
                "dataType": "number"
              },
              "realized_profit_loss": {
                "description": "Realized profit or loss",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "settlement_price": {
                "description": "Last settlement price for position's instrument 0 if instrument wasn't settled yet",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "size": {
                "description": "Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "size_currency": {
                "description": "Only for futures, position size in base currency",
                "apiDataType": "number",
                "dataType": "number"
              },
              "theta": {
                "description": "Only for options, Theta parameter",
                "apiDataType": "number",
                "dataType": "number"
              },
              "total_profit_loss": {
                "description": "Profit or loss from position",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "vega": {
                "description": "Only for options, Vega parameter",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "user.changes.{kind}.{currency}.{interval}": {
      "friendlyChannelName": "UserKindCurrencyChanges",
      "description": "Get notifications about changes in user's updates related to order, trades, etc. in instruments of a given kind and currency.",
      "request": {
        "dataType": "KindCurrencyIntervalRequest",
        "properties": {
          "kind": {
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "currency": {
            "description": "The currency symbol or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbolOrAny",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC",
              "any"
            ]
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval2",
            "enumValues": [
              "100ms",
              "raw"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserChange",
        "properties": {
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "orders": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserOrder",
            "properties": {
              "mmp_cancelled": {
                "description": "`true` if order was cancelled by mmp trigger (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "max_show": {
                "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reject_post_only": {
                "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "api": {
                "description": "`true` if created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "amount": {
                "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "web": {
                "description": "`true` if created via Deribit frontend (optional)",
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "advanced": {
                "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "triggered": {
                "description": "Whether the trigger order has been triggered",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade": {
                "description": "`true` if order made from block_trade trade, added only in that case.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "original_order_type": {
                "description": "Original order type. Optional field",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_offset": {
                "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mmp": {
                "description": "`true` if the order is a MMP order, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "time_in_force": {
                "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "auto_replaced": {
                "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "last_update_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "post_only": {
                "description": "`true` for post-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "replaced": {
                "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "filled_amount": {
                "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price": {
                "description": "Average fill price of the order",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "order_id": {
                "description": "Unique order identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "reduce_only": {
                "description": "`true` for reduce-only orders only",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "commission": {
                "description": "Commission paid so far (in base currency)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "app_name": {
                "description": "The name of the application that placed the order on behalf of the user (optional).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "label": {
                "description": "User defined label (up to 64 characters)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_order_id": {
                "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
                "apiDataType": "string",
                "dataType": "string"
              },
              "trigger_price": {
                "description": "Trigger price (Only for future trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "creation_timestamp": {
                "description": "The timestamp (milliseconds since the Unix epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "is_liquidation": {
                "description": "`true` if order was automatically created during liquidation",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_type": {
                "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "usd": {
                "description": "Option price in USD (Only if `advanced=\"usd\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger_reference_price": {
                "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "risk_reducing": {
                "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "implv": {
                "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "trigger": {
                "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
                "apiDataType": "string",
                "dataType": "string"
              }
            }
          },
          "position": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserPosition",
            "properties": {
              "average_price": {
                "description": "Average price of trades that built this position",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "average_price_usd": {
                "description": "Only for options, average price in USD",
                "apiDataType": "number",
                "dataType": "number"
              },
              "delta": {
                "description": "Delta parameter",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "direction": {
                "description": "Direction: `buy`, `sell` or `zero`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "estimated_liquidation_price": {
                "description": "Estimated liquidation price, added only for futures, for non portfolio margining users",
                "apiDataType": "number",
                "dataType": "number"
              },
              "floating_profit_loss": {
                "description": "Floating profit or loss",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "floating_profit_loss_usd": {
                "description": "Only for options, floating profit or loss in USD",
                "apiDataType": "number",
                "dataType": "number"
              },
              "gamma": {
                "description": "Only for options, Gamma parameter",
                "apiDataType": "number",
                "dataType": "number"
              },
              "index_price": {
                "description": "Current index price",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "initial_margin": {
                "description": "Initial margin",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "interest_value": {
                "description": "Value used to calculate `realized_funding` (perpetual only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "kind": {
                "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"future_combo\"`, `\"option_combo\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "leverage": {
                "description": "Current available leverage for future position",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "maintenance_margin": {
                "description": "Maintenance margin",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "mark_price": {
                "description": "Current mark price for position's instrument",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "open_orders_margin": {
                "description": "Open orders margin",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "realized_funding": {
                "description": "Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments",
                "apiDataType": "number",
                "dataType": "number"
              },
              "realized_profit_loss": {
                "description": "Realized profit or loss",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "settlement_price": {
                "description": "Last settlement price for position's instrument 0 if instrument wasn't settled yet",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "size": {
                "description": "Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "size_currency": {
                "description": "Only for futures, position size in base currency",
                "apiDataType": "number",
                "dataType": "number"
              },
              "theta": {
                "description": "Only for options, Theta parameter",
                "apiDataType": "number",
                "dataType": "number"
              },
              "total_profit_loss": {
                "description": "Profit or loss from position",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "vega": {
                "description": "Only for options, Vega parameter",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          },
          "trades": {
            "description": "",
            "required": true,
            "apiDataType": "array of object",
            "dataType": "array",
            "arrayDataType": "UserTrade",
            "properties": {
              "advanced": {
                "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
                "apiDataType": "string",
                "dataType": "string"
              },
              "amount": {
                "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "api": {
                "description": "`true` if user order was created with API",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "block_trade_id": {
                "description": "Block trade id - when trade was part of block trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "direction": {
                "description": "Direction: `buy`, or `sell`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "fee": {
                "description": "User's fee in units of the specified `fee_currency`",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "fee_currency": {
                "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "index_price": {
                "description": "Index Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "instrument_name": {
                "description": "Unique instrument identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "iv": {
                "description": "Option implied volatility for the price (Option only)",
                "apiDataType": "number",
                "dataType": "number"
              },
              "label": {
                "description": "User defined label (presented only when previously set for order by user)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidation": {
                "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
                "apiDataType": "string",
                "dataType": "string"
              },
              "liquidity": {
                "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mark_price": {
                "description": "Mark Price at the moment of trade",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "matching_id": {
                "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "mmp": {
                "description": "`true` if user order is MMP",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "order_id": {
                "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "order_type": {
                "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "post_only": {
                "description": "`true` if user order is post-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "price": {
                "description": "Price in base currency",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "profit_loss": {
                "description": "Profit and loss in base currency.",
                "required": true,
                "apiDataType": "number",
                "dataType": "number"
              },
              "reduce_only": {
                "description": "`true` if user order is reduce-only",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "risk_reducing": {
                "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "self_trade": {
                "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
                "required": true,
                "apiDataType": "boolean",
                "dataType": "boolean"
              },
              "state": {
                "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "tick_direction": {
                "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "timestamp": {
                "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
                "required": true,
                "apiDataType": "integer",
                "dataType": "DateTime",
                "converters": [
                  "MillisecondsTimestampConverter"
                ]
              },
              "trade_id": {
                "description": "Unique (per currency) trade identifier",
                "required": true,
                "apiDataType": "string",
                "dataType": "string"
              },
              "trade_seq": {
                "description": "The sequence number of the trade within instrument",
                "required": true,
                "apiDataType": "integer",
                "dataType": "integer"
              },
              "underlying_price": {
                "description": "Underlying price for implied volatility calculations (Options only)",
                "apiDataType": "number",
                "dataType": "number"
              }
            }
          }
        }
      }
    },
    "user.lock": {
      "friendlyChannelName": "UserLock",
      "description": "Get notificiation when account is locked/unlocked",
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserLockNotification",
        "properties": {
          "currency": {
            "description": "Currency on which account lock has changed, `ALL` if changed for all currencies",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "locked": {
            "description": "Value is set to 'true' when user account is locked in currency",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          }
        }
      }
    },
    "user.mmp_trigger.{currency}": {
      "friendlyChannelName": "UserMmpTrigger",
      "description": "Triggered when one of mmp limits is crossed",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserMmpFreeze",
        "properties": {
          "frozen_until": {
            "description": "Timestamp (milliseconds since the UNIX epoch) until user will be frozen - 0 means that user is frozen until manual reset.",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          }
        }
      }
    },
    "user.orders.{instrument_name}.raw": {
      "friendlyChannelName": "UserOrdersInstrumentChangeRaw",
      "description": "Get notifications about changes in user's orders for given instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserOrder",
        "properties": {
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reject_post_only": {
            "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "api": {
            "description": "`true` if created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "web": {
            "description": "`true` if created via Deribit frontend (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "advanced": {
            "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "triggered": {
            "description": "Whether the trigger order has been triggered",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade": {
            "description": "`true` if order made from block_trade trade, added only in that case.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "original_order_type": {
            "description": "Original order type. Optional field",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "time_in_force": {
            "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "last_update_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "post_only": {
            "description": "`true` for post-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "filled_amount": {
            "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price": {
            "description": "Average fill price of the order",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "reduce_only": {
            "description": "`true` for reduce-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "commission": {
            "description": "Commission paid so far (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "label": {
            "description": "User defined label (up to 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_price": {
            "description": "Trigger price (Only for future trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_liquidation": {
            "description": "`true` if order was automatically created during liquidation",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_type": {
            "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "usd": {
            "description": "Option price in USD (Only if `advanced=\"usd\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_reference_price": {
            "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "implv": {
            "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "user.orders.{instrument_name}.{interval}": {
      "friendlyChannelName": "UserOrdersInstrumentChange",
      "description": "Get notifications about changes in user's orders for given instrument.",
      "request": {
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval.",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval1",
            "enumValues": [
              "100ms"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserOrder",
        "properties": {
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reject_post_only": {
            "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "api": {
            "description": "`true` if created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "web": {
            "description": "`true` if created via Deribit frontend (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "advanced": {
            "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "triggered": {
            "description": "Whether the trigger order has been triggered",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade": {
            "description": "`true` if order made from block_trade trade, added only in that case.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "original_order_type": {
            "description": "Original order type. Optional field",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "time_in_force": {
            "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "last_update_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "post_only": {
            "description": "`true` for post-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "filled_amount": {
            "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price": {
            "description": "Average fill price of the order",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "reduce_only": {
            "description": "`true` for reduce-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "commission": {
            "description": "Commission paid so far (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "label": {
            "description": "User defined label (up to 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_price": {
            "description": "Trigger price (Only for future trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_liquidation": {
            "description": "`true` if order was automatically created during liquidation",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_type": {
            "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "usd": {
            "description": "Option price in USD (Only if `advanced=\"usd\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_reference_price": {
            "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "implv": {
            "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "user.orders.{kind}.{currency}.raw": {
      "friendlyChannelName": "UserOrdersKindCurrencyChangeRaw",
      "description": "Get notifications about changes in user's orders in instruments of a given kind and currency.",
      "request": {
        "properties": {
          "kind": {
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "string",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "currency": {
            "description": "The currency symbol or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "string",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC",
              "any"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserOrder",
        "properties": {
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reject_post_only": {
            "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "api": {
            "description": "`true` if created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "web": {
            "description": "`true` if created via Deribit frontend (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "advanced": {
            "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "triggered": {
            "description": "Whether the trigger order has been triggered",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade": {
            "description": "`true` if order made from block_trade trade, added only in that case.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "original_order_type": {
            "description": "Original order type. Optional field",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "time_in_force": {
            "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "last_update_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "post_only": {
            "description": "`true` for post-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "filled_amount": {
            "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price": {
            "description": "Average fill price of the order",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "reduce_only": {
            "description": "`true` for reduce-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "commission": {
            "description": "Commission paid so far (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "label": {
            "description": "User defined label (up to 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_price": {
            "description": "Trigger price (Only for future trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_liquidation": {
            "description": "`true` if order was automatically created during liquidation",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_type": {
            "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "usd": {
            "description": "Option price in USD (Only if `advanced=\"usd\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_reference_price": {
            "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "implv": {
            "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "user.orders.{kind}.{currency}.{interval}": {
      "friendlyChannelName": "UserOrdersKindCurrencyChange",
      "description": "Get notifications about changes in user's orders in instruments of a given kind and currency.",
      "request": {
        "properties": {
          "kind": {
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "currency": {
            "description": "The currency symbol or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbolOrAny",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC",
              "any"
            ]
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval.",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval1",
            "enumValues": [
              "100ms"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserOrder",
        "properties": {
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "max_show": {
            "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reject_post_only": {
            "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "api": {
            "description": "`true` if created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "web": {
            "description": "`true` if created via Deribit frontend (optional)",
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "advanced": {
            "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "triggered": {
            "description": "Whether the trigger order has been triggered",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade": {
            "description": "`true` if order made from block_trade trade, added only in that case.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "original_order_type": {
            "description": "Original order type. Optional field",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_offset": {
            "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "time_in_force": {
            "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "last_update_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "post_only": {
            "description": "`true` for post-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "filled_amount": {
            "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "average_price": {
            "description": "Average fill price of the order",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "order_id": {
            "description": "Unique order identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "reduce_only": {
            "description": "`true` for reduce-only orders only",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "commission": {
            "description": "Commission paid so far (in base currency)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "label": {
            "description": "User defined label (up to 64 characters)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "apiDataType": "string",
            "dataType": "string"
          },
          "trigger_price": {
            "description": "Trigger price (Only for future trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "creation_timestamp": {
            "description": "The timestamp (milliseconds since the Unix epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "is_liquidation": {
            "description": "`true` if order was automatically created during liquidation",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_type": {
            "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "usd": {
            "description": "Option price in USD (Only if `advanced=\"usd\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger_reference_price": {
            "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "implv": {
            "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "trigger": {
            "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
            "apiDataType": "string",
            "dataType": "string"
          }
        }
      }
    },
    "user.portfolio.{currency}": {
      "friendlyChannelName": "UserPortfolio",
      "description": "Provides information about current user portfolio",
      "request": {
        "properties": {
          "currency": {
            "description": "The currency symbol",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbol",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "object",
        "dataType": "UserPortfolioNotification",
        "properties": {
          "available_funds": {
            "description": "The account's available funds",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "available_withdrawal_funds": {
            "description": "The account's available to withdrawal funds",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "balance": {
            "description": "The account's balance",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "currency": {
            "description": "The selected currency",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "delta_total": {
            "description": "The sum of position deltas",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "delta_total_map": {
            "description": "Map of position sum's per index",
            "required": true,
            "apiDataType": "object",
            "dataType": "JObject",
            "properties": {}
          },
          "equity": {
            "description": "The account's current equity",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "estimated_liquidation_ratio": {
            "description": "[DEPRECATED] Estimated Liquidation Ratio is returned only for users without portfolio margining enabled. Multiplying it by future position's market price returns its estimated liquidation price. Use estimated_liquidation_ratio_map instead.",
            "deprecated": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "estimated_liquidation_ratio_map": {
            "description": "Map of Estimated Liquidation Ratio per index, it is returned only for users without portfolio margining enabled. Multiplying it by future position's market price returns its estimated liquidation price.",
            "apiDataType": "object",
            "dataType": "JObject",
            "properties": {}
          },
          "fee_balance": {
            "description": "The account's fee balance (it can be used to pay for fees)",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "futures_pl": {
            "description": "Futures profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "futures_session_rpl": {
            "description": "Futures session realized profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "futures_session_upl": {
            "description": "Futures session unrealized profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "initial_margin": {
            "description": "The account's initial margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "maintenance_margin": {
            "description": "The maintenance margin.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "margin_balance": {
            "description": "The account's margin balance",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_delta": {
            "description": "Options summary delta",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_gamma": {
            "description": "Options summary gamma",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_pl": {
            "description": "Options profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_session_rpl": {
            "description": "Options session realized profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_session_upl": {
            "description": "Options session unrealized profit and Loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_theta": {
            "description": "Options summary theta",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_value": {
            "description": "Options value",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "options_vega": {
            "description": "Options summary vega",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "portfolio_margining_enabled": {
            "description": "When `true` portfolio margining is enabled for user",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "projected_delta_total": {
            "description": "The sum of position deltas without positions that will expire during closest expiration",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "projected_initial_margin": {
            "description": "Projected initial margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "projected_maintenance_margin": {
            "description": "Projected maintenance margin",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "session_rpl": {
            "description": "Session realized profit and loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "session_upl": {
            "description": "Session unrealized profit and loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "total_pl": {
            "description": "Profit and loss",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "user.trades.{instrument_name}.{interval}": {
      "friendlyChannelName": "UserTradesInstrumentChange",
      "description": "Get notifications about user's trades in an instrument.",
      "request": {
        "dataType": "InstrumentIntervalRequest",
        "properties": {
          "instrument_name": {
            "description": "Instrument name",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval2",
            "enumValues": [
              "100ms",
              "raw"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserTrade",
        "properties": {
          "advanced": {
            "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "api": {
            "description": "`true` if user order was created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade_id": {
            "description": "Block trade id - when trade was part of block trade",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "fee": {
            "description": "User's fee in units of the specified `fee_currency`",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "fee_currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "index_price": {
            "description": "Index Price at the moment of trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "iv": {
            "description": "Option implied volatility for the price (Option only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "label": {
            "description": "User defined label (presented only when previously set for order by user)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "liquidation": {
            "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
            "apiDataType": "string",
            "dataType": "string"
          },
          "liquidity": {
            "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "mark_price": {
            "description": "Mark Price at the moment of trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "matching_id": {
            "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "mmp": {
            "description": "`true` if user order is MMP",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_id": {
            "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "order_type": {
            "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "post_only": {
            "description": "`true` if user order is post-only",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reduce_only": {
            "description": "`true` if user order is reduce-only",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "risk_reducing": {
            "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "self_trade": {
            "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "tick_direction": {
            "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "timestamp": {
            "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "trade_id": {
            "description": "Unique (per currency) trade identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trade_seq": {
            "description": "The sequence number of the trade within instrument",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "underlying_price": {
            "description": "Underlying price for implied volatility calculations (Options only)",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    },
    "user.trades.{kind}.{currency}.{interval}": {
      "friendlyChannelName": "UserTradesKindCurrencyChange",
      "description": "Get notifications about user's trades in any instrument of a given kind and given currency.",
      "request": {
        "dataType": "KindCurrencyIntervalRequest",
        "properties": {
          "kind": {
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "InstrumentKind",
            "enumValues": [
              "future",
              "option",
              "future_combo",
              "option_combo",
              "combo",
              "any"
            ]
          },
          "currency": {
            "description": "The currency symbol or `\"any\"` for all",
            "required": true,
            "apiDataType": "string",
            "dataType": "CurrencySymbolOrAny",
            "enumValues": [
              "BTC",
              "ETH",
              "SOL",
              "USDC",
              "any"
            ]
          },
          "interval": {
            "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied",
            "required": true,
            "apiDataType": "string",
            "dataType": "NotificationInterval2",
            "enumValues": [
              "100ms",
              "raw"
            ]
          }
        }
      },
      "response": {
        "required": true,
        "apiDataType": "array of object",
        "dataType": "array",
        "arrayDataType": "UserTrade",
        "properties": {
          "advanced": {
            "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
            "apiDataType": "string",
            "dataType": "string"
          },
          "amount": {
            "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "api": {
            "description": "`true` if user order was created with API",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "block_trade_id": {
            "description": "Block trade id - when trade was part of block trade",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "direction": {
            "description": "Direction: `buy`, or `sell`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "fee": {
            "description": "User's fee in units of the specified `fee_currency`",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "fee_currency": {
            "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "index_price": {
            "description": "Index Price at the moment of trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "instrument_name": {
            "description": "Unique instrument identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "iv": {
            "description": "Option implied volatility for the price (Option only)",
            "apiDataType": "number",
            "dataType": "number"
          },
          "label": {
            "description": "User defined label (presented only when previously set for order by user)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "liquidation": {
            "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
            "apiDataType": "string",
            "dataType": "string"
          },
          "liquidity": {
            "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "mark_price": {
            "description": "Mark Price at the moment of trade",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "matching_id": {
            "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "mmp": {
            "description": "`true` if user order is MMP",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "order_id": {
            "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "order_type": {
            "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "post_only": {
            "description": "`true` if user order is post-only",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "price": {
            "description": "Price in base currency",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "profit_loss": {
            "description": "Profit and loss in base currency.",
            "required": true,
            "apiDataType": "number",
            "dataType": "number"
          },
          "reduce_only": {
            "description": "`true` if user order is reduce-only",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "risk_reducing": {
            "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "self_trade": {
            "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that",
            "required": true,
            "apiDataType": "boolean",
            "dataType": "boolean"
          },
          "state": {
            "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "tick_direction": {
            "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "timestamp": {
            "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
            "required": true,
            "apiDataType": "integer",
            "dataType": "DateTime",
            "converters": [
              "MillisecondsTimestampConverter"
            ]
          },
          "trade_id": {
            "description": "Unique (per currency) trade identifier",
            "required": true,
            "apiDataType": "string",
            "dataType": "string"
          },
          "trade_seq": {
            "description": "The sequence number of the trade within instrument",
            "required": true,
            "apiDataType": "integer",
            "dataType": "integer"
          },
          "underlying_price": {
            "description": "Underlying price for implied volatility calculations (Options only)",
            "apiDataType": "number",
            "dataType": "number"
          }
        }
      }
    }
  }
}